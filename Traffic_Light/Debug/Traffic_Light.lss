
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000018a6  0000193a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800074  00800074  0000194e  2**0
                  ALLOC
  3 .stab         0000258c  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bfa  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_1>
       8:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__vector_2>
       c:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 0c 	call	0x184c	; 0x184c <main>
      8a:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER0_u8IntEnable>:
#include "TIMER_private.h"

void (*TIMER0_pvIntFunc)(void)=NULL;
u32 OverFlowCounter=0;

void TIMER0_u8IntEnable(void){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TIMSK,TIMSK_TOIE0);
      9a:	a9 e5       	ldi	r26, 0x59	; 89
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e9 e5       	ldi	r30, 0x59	; 89
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	81 60       	ori	r24, 0x01	; 1
      a6:	8c 93       	st	X, r24
}
      a8:	cf 91       	pop	r28
      aa:	df 91       	pop	r29
      ac:	08 95       	ret

000000ae <TIMER0_u8IntDisable>:

void TIMER0_u8IntDisable(void){
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK,TIMSK_TOIE0);
      b6:	a9 e5       	ldi	r26, 0x59	; 89
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e9 e5       	ldi	r30, 0x59	; 89
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	8e 7f       	andi	r24, 0xFE	; 254
      c2:	8c 93       	st	X, r24
}
      c4:	cf 91       	pop	r28
      c6:	df 91       	pop	r29
      c8:	08 95       	ret

000000ca <TIMER0_u8Init>:

void TIMER0_u8Init(void){
      ca:	df 93       	push	r29
      cc:	cf 93       	push	r28
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
      d2:	e2 e5       	ldi	r30, 0x52	; 82
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	10 82       	st	Z, r1
	CLR_BIT(TCCR0,TCCR0_CS00);
      d8:	a3 e5       	ldi	r26, 0x53	; 83
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e3 e5       	ldi	r30, 0x53	; 83
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	8e 7f       	andi	r24, 0xFE	; 254
      e4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
      e6:	a3 e5       	ldi	r26, 0x53	; 83
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e3 e5       	ldi	r30, 0x53	; 83
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	8d 7f       	andi	r24, 0xFD	; 253
      f2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
      f4:	a3 e5       	ldi	r26, 0x53	; 83
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e3 e5       	ldi	r30, 0x53	; 83
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	8b 7f       	andi	r24, 0xFB	; 251
     100:	8c 93       	st	X, r24
}
     102:	cf 91       	pop	r28
     104:	df 91       	pop	r29
     106:	08 95       	ret

00000108 <TIMER0_u8Stop>:

void TIMER0_u8Stop(void){
     108:	df 93       	push	r29
     10a:	cf 93       	push	r28
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TCCR0,TCCR0_CS00);
     110:	a3 e5       	ldi	r26, 0x53	; 83
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	e3 e5       	ldi	r30, 0x53	; 83
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	8e 7f       	andi	r24, 0xFE	; 254
     11c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
     11e:	a3 e5       	ldi	r26, 0x53	; 83
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	e3 e5       	ldi	r30, 0x53	; 83
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	8d 7f       	andi	r24, 0xFD	; 253
     12a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
     12c:	a3 e5       	ldi	r26, 0x53	; 83
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	e3 e5       	ldi	r30, 0x53	; 83
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8b 7f       	andi	r24, 0xFB	; 251
     138:	8c 93       	st	X, r24
}
     13a:	cf 91       	pop	r28
     13c:	df 91       	pop	r29
     13e:	08 95       	ret

00000140 <TIMER0_u8SetPreScaler>:

u8 TIMER0_u8SetPreScaler(u8 Copy_u8PreScaler){
     140:	df 93       	push	r29
     142:	cf 93       	push	r28
     144:	00 d0       	rcall	.+0      	; 0x146 <TIMER0_u8SetPreScaler+0x6>
     146:	00 d0       	rcall	.+0      	; 0x148 <TIMER0_u8SetPreScaler+0x8>
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62
     14c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     14e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PreScaler){
     150:	8a 81       	ldd	r24, Y+2	; 0x02
     152:	28 2f       	mov	r18, r24
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	3c 83       	std	Y+4, r19	; 0x04
     158:	2b 83       	std	Y+3, r18	; 0x03
     15a:	8b 81       	ldd	r24, Y+3	; 0x03
     15c:	9c 81       	ldd	r25, Y+4	; 0x04
     15e:	83 30       	cpi	r24, 0x03	; 3
     160:	91 05       	cpc	r25, r1
     162:	09 f4       	brne	.+2      	; 0x166 <TIMER0_u8SetPreScaler+0x26>
     164:	49 c0       	rjmp	.+146    	; 0x1f8 <TIMER0_u8SetPreScaler+0xb8>
     166:	2b 81       	ldd	r18, Y+3	; 0x03
     168:	3c 81       	ldd	r19, Y+4	; 0x04
     16a:	24 30       	cpi	r18, 0x04	; 4
     16c:	31 05       	cpc	r19, r1
     16e:	5c f4       	brge	.+22     	; 0x186 <TIMER0_u8SetPreScaler+0x46>
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	81 30       	cpi	r24, 0x01	; 1
     176:	91 05       	cpc	r25, r1
     178:	99 f0       	breq	.+38     	; 0x1a0 <TIMER0_u8SetPreScaler+0x60>
     17a:	2b 81       	ldd	r18, Y+3	; 0x03
     17c:	3c 81       	ldd	r19, Y+4	; 0x04
     17e:	22 30       	cpi	r18, 0x02	; 2
     180:	31 05       	cpc	r19, r1
     182:	21 f1       	breq	.+72     	; 0x1cc <TIMER0_u8SetPreScaler+0x8c>
     184:	7b c0       	rjmp	.+246    	; 0x27c <TIMER0_u8SetPreScaler+0x13c>
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	84 30       	cpi	r24, 0x04	; 4
     18c:	91 05       	cpc	r25, r1
     18e:	09 f4       	brne	.+2      	; 0x192 <TIMER0_u8SetPreScaler+0x52>
     190:	49 c0       	rjmp	.+146    	; 0x224 <TIMER0_u8SetPreScaler+0xe4>
     192:	2b 81       	ldd	r18, Y+3	; 0x03
     194:	3c 81       	ldd	r19, Y+4	; 0x04
     196:	25 30       	cpi	r18, 0x05	; 5
     198:	31 05       	cpc	r19, r1
     19a:	09 f4       	brne	.+2      	; 0x19e <TIMER0_u8SetPreScaler+0x5e>
     19c:	59 c0       	rjmp	.+178    	; 0x250 <TIMER0_u8SetPreScaler+0x110>
     19e:	6e c0       	rjmp	.+220    	; 0x27c <TIMER0_u8SetPreScaler+0x13c>
	case NO_PRE_SCALER:
		SET_BIT(TCCR0,TCCR0_CS00);
     1a0:	a3 e5       	ldi	r26, 0x53	; 83
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e3 e5       	ldi	r30, 0x53	; 83
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	81 60       	ori	r24, 0x01	; 1
     1ac:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
     1ae:	a3 e5       	ldi	r26, 0x53	; 83
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e3 e5       	ldi	r30, 0x53	; 83
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	8d 7f       	andi	r24, 0xFD	; 253
     1ba:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
     1bc:	a3 e5       	ldi	r26, 0x53	; 83
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	e3 e5       	ldi	r30, 0x53	; 83
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	8b 7f       	andi	r24, 0xFB	; 251
     1c8:	8c 93       	st	X, r24
     1ca:	5a c0       	rjmp	.+180    	; 0x280 <TIMER0_u8SetPreScaler+0x140>
		break;

	case CLK_8:
		CLR_BIT(TCCR0,TCCR0_CS00);
     1cc:	a3 e5       	ldi	r26, 0x53	; 83
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	e3 e5       	ldi	r30, 0x53	; 83
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	8e 7f       	andi	r24, 0xFE	; 254
     1d8:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
     1da:	a3 e5       	ldi	r26, 0x53	; 83
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	e3 e5       	ldi	r30, 0x53	; 83
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	82 60       	ori	r24, 0x02	; 2
     1e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
     1e8:	a3 e5       	ldi	r26, 0x53	; 83
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	e3 e5       	ldi	r30, 0x53	; 83
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	8b 7f       	andi	r24, 0xFB	; 251
     1f4:	8c 93       	st	X, r24
     1f6:	44 c0       	rjmp	.+136    	; 0x280 <TIMER0_u8SetPreScaler+0x140>
		break;

	case CLK_64:
		SET_BIT(TCCR0,TCCR0_CS00);
     1f8:	a3 e5       	ldi	r26, 0x53	; 83
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e3 e5       	ldi	r30, 0x53	; 83
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	81 60       	ori	r24, 0x01	; 1
     204:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
     206:	a3 e5       	ldi	r26, 0x53	; 83
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	e3 e5       	ldi	r30, 0x53	; 83
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	82 60       	ori	r24, 0x02	; 2
     212:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
     214:	a3 e5       	ldi	r26, 0x53	; 83
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	e3 e5       	ldi	r30, 0x53	; 83
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	8b 7f       	andi	r24, 0xFB	; 251
     220:	8c 93       	st	X, r24
     222:	2e c0       	rjmp	.+92     	; 0x280 <TIMER0_u8SetPreScaler+0x140>
		break;

	case CLK_256:
		CLR_BIT(TCCR0,TCCR0_CS00);
     224:	a3 e5       	ldi	r26, 0x53	; 83
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e3 e5       	ldi	r30, 0x53	; 83
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8e 7f       	andi	r24, 0xFE	; 254
     230:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
     232:	a3 e5       	ldi	r26, 0x53	; 83
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e3 e5       	ldi	r30, 0x53	; 83
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8d 7f       	andi	r24, 0xFD	; 253
     23e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
     240:	a3 e5       	ldi	r26, 0x53	; 83
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e3 e5       	ldi	r30, 0x53	; 83
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	84 60       	ori	r24, 0x04	; 4
     24c:	8c 93       	st	X, r24
     24e:	18 c0       	rjmp	.+48     	; 0x280 <TIMER0_u8SetPreScaler+0x140>
		break;

	case CLK_1024:
		SET_BIT(TCCR0,TCCR0_CS00);
     250:	a3 e5       	ldi	r26, 0x53	; 83
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e3 e5       	ldi	r30, 0x53	; 83
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	81 60       	ori	r24, 0x01	; 1
     25c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
     25e:	a3 e5       	ldi	r26, 0x53	; 83
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e3 e5       	ldi	r30, 0x53	; 83
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8d 7f       	andi	r24, 0xFD	; 253
     26a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
     26c:	a3 e5       	ldi	r26, 0x53	; 83
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e3 e5       	ldi	r30, 0x53	; 83
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	84 60       	ori	r24, 0x04	; 4
     278:	8c 93       	st	X, r24
     27a:	02 c0       	rjmp	.+4      	; 0x280 <TIMER0_u8SetPreScaler+0x140>
		break;

	default:
		Local_u8ErrorState=NOK;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
     280:	89 81       	ldd	r24, Y+1	; 0x01
}
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	cf 91       	pop	r28
     28c:	df 91       	pop	r29
     28e:	08 95       	ret

00000290 <TIMER0_u8DelayBusyWait>:

u8 TIMER0_u8DelayBusyWait(u32 Copy_u8Delay){
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	62 97       	sbiw	r28, 0x12	; 18
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	6e 87       	std	Y+14, r22	; 0x0e
     2a6:	7f 87       	std	Y+15, r23	; 0x0f
     2a8:	88 8b       	std	Y+16, r24	; 0x10
     2aa:	99 8b       	std	Y+17, r25	; 0x11
	u8 Local_u8ErrorState=OK;
     2ac:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32OverFlowCounter=0;
     2ae:	19 86       	std	Y+9, r1	; 0x09
     2b0:	1a 86       	std	Y+10, r1	; 0x0a
     2b2:	1b 86       	std	Y+11, r1	; 0x0b
     2b4:	1c 86       	std	Y+12, r1	; 0x0c
	if(Copy_u8Delay<=0){
     2b6:	8e 85       	ldd	r24, Y+14	; 0x0e
     2b8:	9f 85       	ldd	r25, Y+15	; 0x0f
     2ba:	a8 89       	ldd	r26, Y+16	; 0x10
     2bc:	b9 89       	ldd	r27, Y+17	; 0x11
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	a1 05       	cpc	r26, r1
     2c2:	b1 05       	cpc	r27, r1
     2c4:	29 f4       	brne	.+10     	; 0x2d0 <TIMER0_u8DelayBusyWait+0x40>
		Local_u8ErrorState=NOK;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	8d 87       	std	Y+13, r24	; 0x0d
		return Local_u8ErrorState;
     2ca:	2d 85       	ldd	r18, Y+13	; 0x0d
     2cc:	2a 8b       	std	Y+18, r18	; 0x12
     2ce:	d4 c0       	rjmp	.+424    	; 0x478 <__stack+0x19>
	}
	if(Copy_u8Delay<256){
     2d0:	8e 85       	ldd	r24, Y+14	; 0x0e
     2d2:	9f 85       	ldd	r25, Y+15	; 0x0f
     2d4:	a8 89       	ldd	r26, Y+16	; 0x10
     2d6:	b9 89       	ldd	r27, Y+17	; 0x11
     2d8:	8f 3f       	cpi	r24, 0xFF	; 255
     2da:	91 05       	cpc	r25, r1
     2dc:	a1 05       	cpc	r26, r1
     2de:	b1 05       	cpc	r27, r1
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <TIMER0_u8DelayBusyWait+0x54>
     2e2:	d0 f4       	brcc	.+52     	; 0x318 <TIMER0_u8DelayBusyWait+0x88>
		TCNT0=256-Copy_u8Delay;
     2e4:	e2 e5       	ldi	r30, 0x52	; 82
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	8e 85       	ldd	r24, Y+14	; 0x0e
     2ea:	81 95       	neg	r24
     2ec:	80 83       	st	Z, r24
		OverFlowCounter=1;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	a0 e0       	ldi	r26, 0x00	; 0
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	80 93 76 00 	sts	0x0076, r24
     2fa:	90 93 77 00 	sts	0x0077, r25
     2fe:	a0 93 78 00 	sts	0x0078, r26
     302:	b0 93 79 00 	sts	0x0079, r27
		Local_u32OverFlowCounter=1;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	89 87       	std	Y+9, r24	; 0x09
     310:	9a 87       	std	Y+10, r25	; 0x0a
     312:	ab 87       	std	Y+11, r26	; 0x0b
     314:	bc 87       	std	Y+12, r27	; 0x0c
     316:	6c c0       	rjmp	.+216    	; 0x3f0 <TIMER0_u8DelayBusyWait+0x160>
	}
	else if(Copy_u8Delay==256){
     318:	8e 85       	ldd	r24, Y+14	; 0x0e
     31a:	9f 85       	ldd	r25, Y+15	; 0x0f
     31c:	a8 89       	ldd	r26, Y+16	; 0x10
     31e:	b9 89       	ldd	r27, Y+17	; 0x11
     320:	80 30       	cpi	r24, 0x00	; 0
     322:	21 e0       	ldi	r18, 0x01	; 1
     324:	92 07       	cpc	r25, r18
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	a2 07       	cpc	r26, r18
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	b2 07       	cpc	r27, r18
     32e:	c1 f4       	brne	.+48     	; 0x360 <TIMER0_u8DelayBusyWait+0xd0>
		TCNT0=0;
     330:	e2 e5       	ldi	r30, 0x52	; 82
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	10 82       	st	Z, r1
		OverFlowCounter=1;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	a0 e0       	ldi	r26, 0x00	; 0
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	80 93 76 00 	sts	0x0076, r24
     342:	90 93 77 00 	sts	0x0077, r25
     346:	a0 93 78 00 	sts	0x0078, r26
     34a:	b0 93 79 00 	sts	0x0079, r27
		Local_u32OverFlowCounter=1;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	89 87       	std	Y+9, r24	; 0x09
     358:	9a 87       	std	Y+10, r25	; 0x0a
     35a:	ab 87       	std	Y+11, r26	; 0x0b
     35c:	bc 87       	std	Y+12, r27	; 0x0c
     35e:	48 c0       	rjmp	.+144    	; 0x3f0 <TIMER0_u8DelayBusyWait+0x160>
	}
	else if(Copy_u8Delay>256){
     360:	8e 85       	ldd	r24, Y+14	; 0x0e
     362:	9f 85       	ldd	r25, Y+15	; 0x0f
     364:	a8 89       	ldd	r26, Y+16	; 0x10
     366:	b9 89       	ldd	r27, Y+17	; 0x11
     368:	81 30       	cpi	r24, 0x01	; 1
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	92 07       	cpc	r25, r18
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	a2 07       	cpc	r26, r18
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	b2 07       	cpc	r27, r18
     376:	e0 f1       	brcs	.+120    	; 0x3f0 <TIMER0_u8DelayBusyWait+0x160>
		OverFlowCounter=Copy_u8Delay/256;
     378:	8e 85       	ldd	r24, Y+14	; 0x0e
     37a:	9f 85       	ldd	r25, Y+15	; 0x0f
     37c:	a8 89       	ldd	r26, Y+16	; 0x10
     37e:	b9 89       	ldd	r27, Y+17	; 0x11
     380:	89 2f       	mov	r24, r25
     382:	9a 2f       	mov	r25, r26
     384:	ab 2f       	mov	r26, r27
     386:	bb 27       	eor	r27, r27
     388:	80 93 76 00 	sts	0x0076, r24
     38c:	90 93 77 00 	sts	0x0077, r25
     390:	a0 93 78 00 	sts	0x0078, r26
     394:	b0 93 79 00 	sts	0x0079, r27
		Local_u32OverFlowCounter=Copy_u8Delay/256;
     398:	8e 85       	ldd	r24, Y+14	; 0x0e
     39a:	9f 85       	ldd	r25, Y+15	; 0x0f
     39c:	a8 89       	ldd	r26, Y+16	; 0x10
     39e:	b9 89       	ldd	r27, Y+17	; 0x11
     3a0:	89 2f       	mov	r24, r25
     3a2:	9a 2f       	mov	r25, r26
     3a4:	ab 2f       	mov	r26, r27
     3a6:	bb 27       	eor	r27, r27
     3a8:	89 87       	std	Y+9, r24	; 0x09
     3aa:	9a 87       	std	Y+10, r25	; 0x0a
     3ac:	ab 87       	std	Y+11, r26	; 0x0b
     3ae:	bc 87       	std	Y+12, r27	; 0x0c
		u32 Local_u8InitialVal=256-(Copy_u8Delay/Local_u32OverFlowCounter);
     3b0:	8e 85       	ldd	r24, Y+14	; 0x0e
     3b2:	9f 85       	ldd	r25, Y+15	; 0x0f
     3b4:	a8 89       	ldd	r26, Y+16	; 0x10
     3b6:	b9 89       	ldd	r27, Y+17	; 0x11
     3b8:	29 85       	ldd	r18, Y+9	; 0x09
     3ba:	3a 85       	ldd	r19, Y+10	; 0x0a
     3bc:	4b 85       	ldd	r20, Y+11	; 0x0b
     3be:	5c 85       	ldd	r21, Y+12	; 0x0c
     3c0:	bc 01       	movw	r22, r24
     3c2:	cd 01       	movw	r24, r26
     3c4:	0e 94 2f 0c 	call	0x185e	; 0x185e <__udivmodsi4>
     3c8:	da 01       	movw	r26, r20
     3ca:	c9 01       	movw	r24, r18
     3cc:	9c 01       	movw	r18, r24
     3ce:	ad 01       	movw	r20, r26
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	a0 e0       	ldi	r26, 0x00	; 0
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	82 1b       	sub	r24, r18
     3da:	93 0b       	sbc	r25, r19
     3dc:	a4 0b       	sbc	r26, r20
     3de:	b5 0b       	sbc	r27, r21
     3e0:	89 83       	std	Y+1, r24	; 0x01
     3e2:	9a 83       	std	Y+2, r25	; 0x02
     3e4:	ab 83       	std	Y+3, r26	; 0x03
     3e6:	bc 83       	std	Y+4, r27	; 0x04
		TCNT0=Local_u8InitialVal;
     3e8:	e2 e5       	ldi	r30, 0x52	; 82
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	80 83       	st	Z, r24
	}
	SET_BIT(TCCR0,TCCR0_CS00);
     3f0:	a3 e5       	ldi	r26, 0x53	; 83
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	e3 e5       	ldi	r30, 0x53	; 83
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	81 60       	ori	r24, 0x01	; 1
     3fc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
     3fe:	a3 e5       	ldi	r26, 0x53	; 83
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	e3 e5       	ldi	r30, 0x53	; 83
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	8d 7f       	andi	r24, 0xFD	; 253
     40a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
     40c:	a3 e5       	ldi	r26, 0x53	; 83
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	e3 e5       	ldi	r30, 0x53	; 83
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	8b 7f       	andi	r24, 0xFB	; 251
     418:	8c 93       	st	X, r24
	u32 Local_u8OverFlowNum=0;
     41a:	1d 82       	std	Y+5, r1	; 0x05
     41c:	1e 82       	std	Y+6, r1	; 0x06
     41e:	1f 82       	std	Y+7, r1	; 0x07
     420:	18 86       	std	Y+8, r1	; 0x08
     422:	1b c0       	rjmp	.+54     	; 0x45a <TIMER0_u8DelayBusyWait+0x1ca>
	while(Local_u8OverFlowNum<Local_u32OverFlowCounter){
		while(GET_BIT(TIFR,TIFR_TOV0)==0);
     424:	e8 e5       	ldi	r30, 0x58	; 88
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	81 70       	andi	r24, 0x01	; 1
     430:	90 70       	andi	r25, 0x00	; 0
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	b9 f3       	breq	.-18     	; 0x424 <TIMER0_u8DelayBusyWait+0x194>
		SET_BIT(TIFR,TIFR_TOV0);
     436:	a8 e5       	ldi	r26, 0x58	; 88
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	e8 e5       	ldi	r30, 0x58	; 88
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	81 60       	ori	r24, 0x01	; 1
     442:	8c 93       	st	X, r24
		Local_u8OverFlowNum++;
     444:	8d 81       	ldd	r24, Y+5	; 0x05
     446:	9e 81       	ldd	r25, Y+6	; 0x06
     448:	af 81       	ldd	r26, Y+7	; 0x07
     44a:	b8 85       	ldd	r27, Y+8	; 0x08
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	a1 1d       	adc	r26, r1
     450:	b1 1d       	adc	r27, r1
     452:	8d 83       	std	Y+5, r24	; 0x05
     454:	9e 83       	std	Y+6, r25	; 0x06
     456:	af 83       	std	Y+7, r26	; 0x07
     458:	b8 87       	std	Y+8, r27	; 0x08
	}
	SET_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);
	u32 Local_u8OverFlowNum=0;
	while(Local_u8OverFlowNum<Local_u32OverFlowCounter){
     45a:	2d 81       	ldd	r18, Y+5	; 0x05
     45c:	3e 81       	ldd	r19, Y+6	; 0x06
     45e:	4f 81       	ldd	r20, Y+7	; 0x07
     460:	58 85       	ldd	r21, Y+8	; 0x08
     462:	89 85       	ldd	r24, Y+9	; 0x09
     464:	9a 85       	ldd	r25, Y+10	; 0x0a
     466:	ab 85       	ldd	r26, Y+11	; 0x0b
     468:	bc 85       	ldd	r27, Y+12	; 0x0c
     46a:	28 17       	cp	r18, r24
     46c:	39 07       	cpc	r19, r25
     46e:	4a 07       	cpc	r20, r26
     470:	5b 07       	cpc	r21, r27
     472:	c0 f2       	brcs	.-80     	; 0x424 <TIMER0_u8DelayBusyWait+0x194>
		SET_BIT(TIFR,TIFR_TOV0);
		Local_u8OverFlowNum++;
	}
	//TIMER0_u8Stop();

	return Local_u8ErrorState;
     474:	8d 85       	ldd	r24, Y+13	; 0x0d
     476:	8a 8b       	std	Y+18, r24	; 0x12
     478:	8a 89       	ldd	r24, Y+18	; 0x12
}
     47a:	62 96       	adiw	r28, 0x12	; 18
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <TIMER0_u8DelayInt>:

u8 TIMER0_u8DelayInt(u32 Copy_u8Delay){
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	2a 97       	sbiw	r28, 0x0a	; 10
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	6e 83       	std	Y+6, r22	; 0x06
     4a2:	7f 83       	std	Y+7, r23	; 0x07
     4a4:	88 87       	std	Y+8, r24	; 0x08
     4a6:	99 87       	std	Y+9, r25	; 0x09
	u8 Local_u8ErrorState=OK;
     4a8:	1d 82       	std	Y+5, r1	; 0x05
	if(Copy_u8Delay<=0){
     4aa:	8e 81       	ldd	r24, Y+6	; 0x06
     4ac:	9f 81       	ldd	r25, Y+7	; 0x07
     4ae:	a8 85       	ldd	r26, Y+8	; 0x08
     4b0:	b9 85       	ldd	r27, Y+9	; 0x09
     4b2:	00 97       	sbiw	r24, 0x00	; 0
     4b4:	a1 05       	cpc	r26, r1
     4b6:	b1 05       	cpc	r27, r1
     4b8:	29 f4       	brne	.+10     	; 0x4c4 <TIMER0_u8DelayInt+0x38>
		Local_u8ErrorState=NOK;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	8d 83       	std	Y+5, r24	; 0x05
		return Local_u8ErrorState;
     4be:	2d 81       	ldd	r18, Y+5	; 0x05
     4c0:	2a 87       	std	Y+10, r18	; 0x0a
     4c2:	8f c0       	rjmp	.+286    	; 0x5e2 <TIMER0_u8DelayInt+0x156>
	}
	if(Copy_u8Delay<256){
     4c4:	8e 81       	ldd	r24, Y+6	; 0x06
     4c6:	9f 81       	ldd	r25, Y+7	; 0x07
     4c8:	a8 85       	ldd	r26, Y+8	; 0x08
     4ca:	b9 85       	ldd	r27, Y+9	; 0x09
     4cc:	8f 3f       	cpi	r24, 0xFF	; 255
     4ce:	91 05       	cpc	r25, r1
     4d0:	a1 05       	cpc	r26, r1
     4d2:	b1 05       	cpc	r27, r1
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <TIMER0_u8DelayInt+0x4c>
     4d6:	90 f4       	brcc	.+36     	; 0x4fc <TIMER0_u8DelayInt+0x70>
		TCNT0=256-Copy_u8Delay;
     4d8:	e2 e5       	ldi	r30, 0x52	; 82
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	8e 81       	ldd	r24, Y+6	; 0x06
     4de:	81 95       	neg	r24
     4e0:	80 83       	st	Z, r24
		OverFlowCounter=1;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	80 93 76 00 	sts	0x0076, r24
     4ee:	90 93 77 00 	sts	0x0077, r25
     4f2:	a0 93 78 00 	sts	0x0078, r26
     4f6:	b0 93 79 00 	sts	0x0079, r27
     4fa:	5c c0       	rjmp	.+184    	; 0x5b4 <TIMER0_u8DelayInt+0x128>
	}
	else if(Copy_u8Delay==256){
     4fc:	8e 81       	ldd	r24, Y+6	; 0x06
     4fe:	9f 81       	ldd	r25, Y+7	; 0x07
     500:	a8 85       	ldd	r26, Y+8	; 0x08
     502:	b9 85       	ldd	r27, Y+9	; 0x09
     504:	80 30       	cpi	r24, 0x00	; 0
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	92 07       	cpc	r25, r18
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	a2 07       	cpc	r26, r18
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	b2 07       	cpc	r27, r18
     512:	81 f4       	brne	.+32     	; 0x534 <TIMER0_u8DelayInt+0xa8>
		TCNT0=0;
     514:	e2 e5       	ldi	r30, 0x52	; 82
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	10 82       	st	Z, r1
		OverFlowCounter=1;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	a0 e0       	ldi	r26, 0x00	; 0
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	80 93 76 00 	sts	0x0076, r24
     526:	90 93 77 00 	sts	0x0077, r25
     52a:	a0 93 78 00 	sts	0x0078, r26
     52e:	b0 93 79 00 	sts	0x0079, r27
     532:	40 c0       	rjmp	.+128    	; 0x5b4 <TIMER0_u8DelayInt+0x128>
	}
	else if(Copy_u8Delay>256){
     534:	8e 81       	ldd	r24, Y+6	; 0x06
     536:	9f 81       	ldd	r25, Y+7	; 0x07
     538:	a8 85       	ldd	r26, Y+8	; 0x08
     53a:	b9 85       	ldd	r27, Y+9	; 0x09
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	21 e0       	ldi	r18, 0x01	; 1
     540:	92 07       	cpc	r25, r18
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	a2 07       	cpc	r26, r18
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	b2 07       	cpc	r27, r18
     54a:	a0 f1       	brcs	.+104    	; 0x5b4 <TIMER0_u8DelayInt+0x128>
		OverFlowCounter=Copy_u8Delay/256;
     54c:	8e 81       	ldd	r24, Y+6	; 0x06
     54e:	9f 81       	ldd	r25, Y+7	; 0x07
     550:	a8 85       	ldd	r26, Y+8	; 0x08
     552:	b9 85       	ldd	r27, Y+9	; 0x09
     554:	89 2f       	mov	r24, r25
     556:	9a 2f       	mov	r25, r26
     558:	ab 2f       	mov	r26, r27
     55a:	bb 27       	eor	r27, r27
     55c:	80 93 76 00 	sts	0x0076, r24
     560:	90 93 77 00 	sts	0x0077, r25
     564:	a0 93 78 00 	sts	0x0078, r26
     568:	b0 93 79 00 	sts	0x0079, r27
		u32 Local_u8InitialVal=256-(Copy_u8Delay/OverFlowCounter);
     56c:	20 91 76 00 	lds	r18, 0x0076
     570:	30 91 77 00 	lds	r19, 0x0077
     574:	40 91 78 00 	lds	r20, 0x0078
     578:	50 91 79 00 	lds	r21, 0x0079
     57c:	8e 81       	ldd	r24, Y+6	; 0x06
     57e:	9f 81       	ldd	r25, Y+7	; 0x07
     580:	a8 85       	ldd	r26, Y+8	; 0x08
     582:	b9 85       	ldd	r27, Y+9	; 0x09
     584:	bc 01       	movw	r22, r24
     586:	cd 01       	movw	r24, r26
     588:	0e 94 2f 0c 	call	0x185e	; 0x185e <__udivmodsi4>
     58c:	da 01       	movw	r26, r20
     58e:	c9 01       	movw	r24, r18
     590:	9c 01       	movw	r18, r24
     592:	ad 01       	movw	r20, r26
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	82 1b       	sub	r24, r18
     59e:	93 0b       	sbc	r25, r19
     5a0:	a4 0b       	sbc	r26, r20
     5a2:	b5 0b       	sbc	r27, r21
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	9a 83       	std	Y+2, r25	; 0x02
     5a8:	ab 83       	std	Y+3, r26	; 0x03
     5aa:	bc 83       	std	Y+4, r27	; 0x04
		TCNT0=Local_u8InitialVal;
     5ac:	e2 e5       	ldi	r30, 0x52	; 82
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	80 83       	st	Z, r24
	}
	SET_BIT(TCCR0,TCCR0_CS00);
     5b4:	a3 e5       	ldi	r26, 0x53	; 83
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	e3 e5       	ldi	r30, 0x53	; 83
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	81 60       	ori	r24, 0x01	; 1
     5c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
     5c2:	a3 e5       	ldi	r26, 0x53	; 83
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
     5c6:	e3 e5       	ldi	r30, 0x53	; 83
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	8d 7f       	andi	r24, 0xFD	; 253
     5ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
     5d0:	a3 e5       	ldi	r26, 0x53	; 83
     5d2:	b0 e0       	ldi	r27, 0x00	; 0
     5d4:	e3 e5       	ldi	r30, 0x53	; 83
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	8b 7f       	andi	r24, 0xFB	; 251
     5dc:	8c 93       	st	X, r24

	return Local_u8ErrorState;
     5de:	8d 81       	ldd	r24, Y+5	; 0x05
     5e0:	8a 87       	std	Y+10, r24	; 0x0a
     5e2:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     5e4:	2a 96       	adiw	r28, 0x0a	; 10
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	cf 91       	pop	r28
     5f2:	df 91       	pop	r29
     5f4:	08 95       	ret

000005f6 <TIMER0_u8IntSetCallBack>:

u8 TIMER0_u8IntSetCallBack(void (*Copy_pvIntFunc)(void)){
     5f6:	df 93       	push	r29
     5f8:	cf 93       	push	r28
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <TIMER0_u8IntSetCallBack+0x6>
     5fc:	0f 92       	push	r0
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	9b 83       	std	Y+3, r25	; 0x03
     604:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     606:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvIntFunc!=NULL){
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	9b 81       	ldd	r25, Y+3	; 0x03
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	39 f0       	breq	.+14     	; 0x61e <TIMER0_u8IntSetCallBack+0x28>
		TIMER0_pvIntFunc=Copy_pvIntFunc;
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	9b 81       	ldd	r25, Y+3	; 0x03
     614:	90 93 75 00 	sts	0x0075, r25
     618:	80 93 74 00 	sts	0x0074, r24
     61c:	02 c0       	rjmp	.+4      	; 0x622 <TIMER0_u8IntSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     622:	89 81       	ldd	r24, Y+1	; 0x01
}
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	cf 91       	pop	r28
     62c:	df 91       	pop	r29
     62e:	08 95       	ret

00000630 <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void){
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
     63a:	2f 93       	push	r18
     63c:	3f 93       	push	r19
     63e:	4f 93       	push	r20
     640:	5f 93       	push	r21
     642:	6f 93       	push	r22
     644:	7f 93       	push	r23
     646:	8f 93       	push	r24
     648:	9f 93       	push	r25
     64a:	af 93       	push	r26
     64c:	bf 93       	push	r27
     64e:	ef 93       	push	r30
     650:	ff 93       	push	r31
     652:	df 93       	push	r29
     654:	cf 93       	push	r28
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u8Counter=0;
	Local_u8Counter++;
     65a:	80 91 7a 00 	lds	r24, 0x007A
     65e:	90 91 7b 00 	lds	r25, 0x007B
     662:	a0 91 7c 00 	lds	r26, 0x007C
     666:	b0 91 7d 00 	lds	r27, 0x007D
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	a1 1d       	adc	r26, r1
     66e:	b1 1d       	adc	r27, r1
     670:	80 93 7a 00 	sts	0x007A, r24
     674:	90 93 7b 00 	sts	0x007B, r25
     678:	a0 93 7c 00 	sts	0x007C, r26
     67c:	b0 93 7d 00 	sts	0x007D, r27
	if(TIMER0_pvIntFunc!=NULL && Local_u8Counter==OverFlowCounter){
     680:	80 91 74 00 	lds	r24, 0x0074
     684:	90 91 75 00 	lds	r25, 0x0075
     688:	00 97       	sbiw	r24, 0x00	; 0
     68a:	e1 f0       	breq	.+56     	; 0x6c4 <__vector_11+0x94>
     68c:	20 91 7a 00 	lds	r18, 0x007A
     690:	30 91 7b 00 	lds	r19, 0x007B
     694:	40 91 7c 00 	lds	r20, 0x007C
     698:	50 91 7d 00 	lds	r21, 0x007D
     69c:	80 91 76 00 	lds	r24, 0x0076
     6a0:	90 91 77 00 	lds	r25, 0x0077
     6a4:	a0 91 78 00 	lds	r26, 0x0078
     6a8:	b0 91 79 00 	lds	r27, 0x0079
     6ac:	28 17       	cp	r18, r24
     6ae:	39 07       	cpc	r19, r25
     6b0:	4a 07       	cpc	r20, r26
     6b2:	5b 07       	cpc	r21, r27
     6b4:	39 f4       	brne	.+14     	; 0x6c4 <__vector_11+0x94>
		TIMER0_pvIntFunc();
     6b6:	e0 91 74 00 	lds	r30, 0x0074
     6ba:	f0 91 75 00 	lds	r31, 0x0075
     6be:	09 95       	icall
		TIMER0_u8Stop();
     6c0:	0e 94 84 00 	call	0x108	; 0x108 <TIMER0_u8Stop>
	}
	else{

	}
}
     6c4:	cf 91       	pop	r28
     6c6:	df 91       	pop	r29
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	0f 90       	pop	r0
     6e6:	1f 90       	pop	r1
     6e8:	18 95       	reti

000006ea <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void){
     6ea:	df 93       	push	r29
     6ec:	cf 93       	push	r28
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     6f2:	ea e3       	ldi	r30, 0x3A	; 58
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	87 e0       	ldi	r24, 0x07	; 7
     6f8:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
     6fa:	e7 e3       	ldi	r30, 0x37	; 55
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	87 e0       	ldi	r24, 0x07	; 7
     700:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
     702:	e4 e3       	ldi	r30, 0x34	; 52
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
     70a:	e1 e3       	ldi	r30, 0x31	; 49
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	10 82       	st	Z, r1

	PORTA=PORTA_INIT;
     710:	eb e3       	ldi	r30, 0x3B	; 59
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	10 82       	st	Z, r1
	PORTB=PORTB_INIT;
     716:	e8 e3       	ldi	r30, 0x38	; 56
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	10 82       	st	Z, r1
	PORTC=PORTC_INIT;
     71c:	e5 e3       	ldi	r30, 0x35	; 53
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	10 82       	st	Z, r1
	PORTD=PORTD_INIT;
     722:	e2 e3       	ldi	r30, 0x32	; 50
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	80 83       	st	Z, r24
}
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <GIE_viodEnable>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "GIE_register.h"
#include "GIE_interface.h"

void GIE_viodEnable(void){
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     738:	af e5       	ldi	r26, 0x5F	; 95
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	ef e5       	ldi	r30, 0x5F	; 95
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	80 81       	ld	r24, Z
     742:	80 68       	ori	r24, 0x80	; 128
     744:	8c 93       	st	X, r24
}
     746:	cf 91       	pop	r28
     748:	df 91       	pop	r29
     74a:	08 95       	ret

0000074c <GIE_viodDisable>:

void GIE_viodDisable(void){
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     754:	af e5       	ldi	r26, 0x5F	; 95
     756:	b0 e0       	ldi	r27, 0x00	; 0
     758:	ef e5       	ldi	r30, 0x5F	; 95
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	80 81       	ld	r24, Z
     75e:	8f 77       	andi	r24, 0x7F	; 127
     760:	8c 93       	st	X, r24
}
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	08 95       	ret

00000768 <EXTI_u8IntEnable>:

void (*EXTI_pvInt0Func)(void)=NULL;
void (*EXTI_pvInt1Func)(void)=NULL;
void (*EXTI_pvInt2Func)(void)=NULL;

u8 EXTI_u8IntEnable(u8 Copy_u8Interrupt){
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	00 d0       	rcall	.+0      	; 0x76e <EXTI_u8IntEnable+0x6>
     76e:	00 d0       	rcall	.+0      	; 0x770 <EXTI_u8IntEnable+0x8>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     776:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Interrupt){
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	28 2f       	mov	r18, r24
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	3c 83       	std	Y+4, r19	; 0x04
     780:	2b 83       	std	Y+3, r18	; 0x03
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	91 05       	cpc	r25, r1
     78a:	91 f0       	breq	.+36     	; 0x7b0 <EXTI_u8IntEnable+0x48>
     78c:	2b 81       	ldd	r18, Y+3	; 0x03
     78e:	3c 81       	ldd	r19, Y+4	; 0x04
     790:	23 30       	cpi	r18, 0x03	; 3
     792:	31 05       	cpc	r19, r1
     794:	a9 f0       	breq	.+42     	; 0x7c0 <EXTI_u8IntEnable+0x58>
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	9c 81       	ldd	r25, Y+4	; 0x04
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	91 05       	cpc	r25, r1
     79e:	c1 f4       	brne	.+48     	; 0x7d0 <EXTI_u8IntEnable+0x68>
	case INT0:
		SET_BIT(GICR,GICR_INT0);
     7a0:	ab e5       	ldi	r26, 0x5B	; 91
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	eb e5       	ldi	r30, 0x5B	; 91
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	80 64       	ori	r24, 0x40	; 64
     7ac:	8c 93       	st	X, r24
     7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <EXTI_u8IntEnable+0x6c>
		break;

	case INT1:
		SET_BIT(GICR,GICR_INT1);
     7b0:	ab e5       	ldi	r26, 0x5B	; 91
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	eb e5       	ldi	r30, 0x5B	; 91
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	80 68       	ori	r24, 0x80	; 128
     7bc:	8c 93       	st	X, r24
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <EXTI_u8IntEnable+0x6c>
		break;

	case INT2:
		SET_BIT(GICR,GICR_INT2);
     7c0:	ab e5       	ldi	r26, 0x5B	; 91
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	eb e5       	ldi	r30, 0x5B	; 91
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	80 62       	ori	r24, 0x20	; 32
     7cc:	8c 93       	st	X, r24
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <EXTI_u8IntEnable+0x6c>
		break;

	default:
		Local_u8ErrorState=NOK;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
}
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <EXTI_u8IntDisable>:

u8 EXTI_u8IntDisable(u8 Copy_u8Interrupt){
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <EXTI_u8IntDisable+0x6>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <EXTI_u8IntDisable+0x8>
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     7f2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Interrupt){
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	3c 83       	std	Y+4, r19	; 0x04
     7fc:	2b 83       	std	Y+3, r18	; 0x03
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	9c 81       	ldd	r25, Y+4	; 0x04
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	91 05       	cpc	r25, r1
     806:	91 f0       	breq	.+36     	; 0x82c <EXTI_u8IntDisable+0x48>
     808:	2b 81       	ldd	r18, Y+3	; 0x03
     80a:	3c 81       	ldd	r19, Y+4	; 0x04
     80c:	23 30       	cpi	r18, 0x03	; 3
     80e:	31 05       	cpc	r19, r1
     810:	a9 f0       	breq	.+42     	; 0x83c <EXTI_u8IntDisable+0x58>
     812:	8b 81       	ldd	r24, Y+3	; 0x03
     814:	9c 81       	ldd	r25, Y+4	; 0x04
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	91 05       	cpc	r25, r1
     81a:	c1 f4       	brne	.+48     	; 0x84c <EXTI_u8IntDisable+0x68>
	case INT0:
		CLR_BIT(GICR,GICR_INT0);
     81c:	ab e5       	ldi	r26, 0x5B	; 91
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	eb e5       	ldi	r30, 0x5B	; 91
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	8f 7b       	andi	r24, 0xBF	; 191
     828:	8c 93       	st	X, r24
     82a:	12 c0       	rjmp	.+36     	; 0x850 <EXTI_u8IntDisable+0x6c>
		break;

	case INT1:
		CLR_BIT(GICR,GICR_INT1);
     82c:	ab e5       	ldi	r26, 0x5B	; 91
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	eb e5       	ldi	r30, 0x5B	; 91
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	8f 77       	andi	r24, 0x7F	; 127
     838:	8c 93       	st	X, r24
     83a:	0a c0       	rjmp	.+20     	; 0x850 <EXTI_u8IntDisable+0x6c>
		break;

	case INT2:
		CLR_BIT(GICR,GICR_INT2);
     83c:	ab e5       	ldi	r26, 0x5B	; 91
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	eb e5       	ldi	r30, 0x5B	; 91
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	8f 7d       	andi	r24, 0xDF	; 223
     848:	8c 93       	st	X, r24
     84a:	02 c0       	rjmp	.+4      	; 0x850 <EXTI_u8IntDisable+0x6c>
		break;

	default:
		Local_u8ErrorState=NOK;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
     850:	89 81       	ldd	r24, Y+1	; 0x01
}
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	cf 91       	pop	r28
     85c:	df 91       	pop	r29
     85e:	08 95       	ret

00000860 <EXTI_voidInt0Init>:

void EXTI_voidInt0Init(void){
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
#elif INI0_SENSE==ON_CHANGE
	CLR_BIT(MCUCR,MCUCR_ISC01);
	SET_BIT(MCUCR,MCUCR_ISC00);

#elif INI0_SENSE==FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
     868:	a5 e5       	ldi	r26, 0x55	; 85
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	e5 e5       	ldi	r30, 0x55	; 85
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	82 60       	ori	r24, 0x02	; 2
     874:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
     876:	a5 e5       	ldi	r26, 0x55	; 85
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	e5 e5       	ldi	r30, 0x55	; 85
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	8e 7f       	andi	r24, 0xFE	; 254
     882:	8c 93       	st	X, r24
#else
#error "Wrong INI0_SENSE configuration"
#endif
	//interrupt enable for INT0
#if INI0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT0);
     884:	ab e5       	ldi	r26, 0x5B	; 91
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	eb e5       	ldi	r30, 0x5B	; 91
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	80 64       	ori	r24, 0x40	; 64
     890:	8c 93       	st	X, r24
#elif INI0_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INI0_INITIAL_STATE configuration"
#endif
}
     892:	cf 91       	pop	r28
     894:	df 91       	pop	r29
     896:	08 95       	ret

00000898 <EXTI_u8Int0SetSenseControl>:

u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Sense){
     898:	df 93       	push	r29
     89a:	cf 93       	push	r28
     89c:	00 d0       	rcall	.+0      	; 0x89e <EXTI_u8Int0SetSenseControl+0x6>
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     8a4:	19 82       	std	Y+1, r1	; 0x01
		CLR_BIT(MCUCR,MCUCR_ISC01);
		SET_BIT(MCUCR,MCUCR_ISC00);
		break;

	case FALLING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC01);
     8a6:	a5 e5       	ldi	r26, 0x55	; 85
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e5 e5       	ldi	r30, 0x55	; 85
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	82 60       	ori	r24, 0x02	; 2
     8b2:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
     8b4:	a5 e5       	ldi	r26, 0x55	; 85
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e5 e5       	ldi	r30, 0x55	; 85
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	8e 7f       	andi	r24, 0xFE	; 254
     8c0:	8c 93       	st	X, r24

	default:
		Local_u8ErrorState=NOK;
		break;
	}
	return Local_u8ErrorState;
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
}
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	cf 91       	pop	r28
     8ca:	df 91       	pop	r29
     8cc:	08 95       	ret

000008ce <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void)){
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <EXTI_u8Int0SetCallBack+0x6>
     8d4:	0f 92       	push	r0
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	9b 83       	std	Y+3, r25	; 0x03
     8dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     8de:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func==NULL){
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	9b 81       	ldd	r25, Y+3	; 0x03
     8e4:	00 97       	sbiw	r24, 0x00	; 0
     8e6:	19 f4       	brne	.+6      	; 0x8ee <EXTI_u8Int0SetCallBack+0x20>
		Local_u8ErrorState=NULL_POINTER;
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	06 c0       	rjmp	.+12     	; 0x8fa <EXTI_u8Int0SetCallBack+0x2c>
	}
	else{
		EXTI_pvInt0Func=Copy_pvInt0Func;
     8ee:	8a 81       	ldd	r24, Y+2	; 0x02
     8f0:	9b 81       	ldd	r25, Y+3	; 0x03
     8f2:	90 93 7f 00 	sts	0x007F, r25
     8f6:	80 93 7e 00 	sts	0x007E, r24
	}
	return Local_u8ErrorState;
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	cf 91       	pop	r28
     904:	df 91       	pop	r29
     906:	08 95       	ret

00000908 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	2f 93       	push	r18
     914:	3f 93       	push	r19
     916:	4f 93       	push	r20
     918:	5f 93       	push	r21
     91a:	6f 93       	push	r22
     91c:	7f 93       	push	r23
     91e:	8f 93       	push	r24
     920:	9f 93       	push	r25
     922:	af 93       	push	r26
     924:	bf 93       	push	r27
     926:	ef 93       	push	r30
     928:	ff 93       	push	r31
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL)
     932:	80 91 7e 00 	lds	r24, 0x007E
     936:	90 91 7f 00 	lds	r25, 0x007F
     93a:	00 97       	sbiw	r24, 0x00	; 0
     93c:	29 f0       	breq	.+10     	; 0x948 <__vector_1+0x40>
		EXTI_pvInt0Func();
     93e:	e0 91 7e 00 	lds	r30, 0x007E
     942:	f0 91 7f 00 	lds	r31, 0x007F
     946:	09 95       	icall
	else
	{

	}
}
     948:	cf 91       	pop	r28
     94a:	df 91       	pop	r29
     94c:	ff 91       	pop	r31
     94e:	ef 91       	pop	r30
     950:	bf 91       	pop	r27
     952:	af 91       	pop	r26
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	7f 91       	pop	r23
     95a:	6f 91       	pop	r22
     95c:	5f 91       	pop	r21
     95e:	4f 91       	pop	r20
     960:	3f 91       	pop	r19
     962:	2f 91       	pop	r18
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void){
     96e:	df 93       	push	r29
     970:	cf 93       	push	r28
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
#elif INI1_SENSE==ON_CHANGE
	CLR_BIT(MCUCR,MCUCR_ISC11);
	SET_BIT(MCUCR,MCUCR_ISC10);

#elif INI1_SENSE==FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC11);
     976:	a5 e5       	ldi	r26, 0x55	; 85
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e5 e5       	ldi	r30, 0x55	; 85
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	88 60       	ori	r24, 0x08	; 8
     982:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
     984:	a5 e5       	ldi	r26, 0x55	; 85
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	e5 e5       	ldi	r30, 0x55	; 85
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	8b 7f       	andi	r24, 0xFB	; 251
     990:	8c 93       	st	X, r24
#else
#error "Wrong INI1_SENSE configuration"
#endif
	//interrupt enable for INT1
#if INI1_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT1);
     992:	ab e5       	ldi	r26, 0x5B	; 91
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	eb e5       	ldi	r30, 0x5B	; 91
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	80 68       	ori	r24, 0x80	; 128
     99e:	8c 93       	st	X, r24
#elif INI1_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT1);
#else
#error "Wrong INI1_INITIAL_STATE configuration"
#endif
}
     9a0:	cf 91       	pop	r28
     9a2:	df 91       	pop	r29
     9a4:	08 95       	ret

000009a6 <EXTI_u8Int1SetSenseControl>:

u8 EXTI_u8Int1SetSenseControl(u8 Copy_u8Sense){
     9a6:	df 93       	push	r29
     9a8:	cf 93       	push	r28
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <EXTI_u8Int1SetSenseControl+0x6>
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     9b2:	19 82       	std	Y+1, r1	; 0x01
		CLR_BIT(MCUCR,MCUCR_ISC11);
		SET_BIT(MCUCR,MCUCR_ISC10);
		break;

	case FALLING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC11);
     9b4:	a5 e5       	ldi	r26, 0x55	; 85
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	e5 e5       	ldi	r30, 0x55	; 85
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	88 60       	ori	r24, 0x08	; 8
     9c0:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
     9c2:	a5 e5       	ldi	r26, 0x55	; 85
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e5 e5       	ldi	r30, 0x55	; 85
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	8b 7f       	andi	r24, 0xFB	; 251
     9ce:	8c 93       	st	X, r24

	default:
		Local_u8ErrorState=NOK;
		break;
	}
	return Local_u8ErrorState;
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
}
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	cf 91       	pop	r28
     9d8:	df 91       	pop	r29
     9da:	08 95       	ret

000009dc <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func)(void)){
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <EXTI_u8Int1SetCallBack+0x6>
     9e2:	0f 92       	push	r0
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	9b 83       	std	Y+3, r25	; 0x03
     9ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     9ec:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func==NULL){
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	9b 81       	ldd	r25, Y+3	; 0x03
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	19 f4       	brne	.+6      	; 0x9fc <EXTI_u8Int1SetCallBack+0x20>
		Local_u8ErrorState=NULL_POINTER;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	89 83       	std	Y+1, r24	; 0x01
     9fa:	06 c0       	rjmp	.+12     	; 0xa08 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else{
		EXTI_pvInt1Func=Copy_pvInt1Func;
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	9b 81       	ldd	r25, Y+3	; 0x03
     a00:	90 93 81 00 	sts	0x0081, r25
     a04:	80 93 80 00 	sts	0x0080, r24
	}
	return Local_u8ErrorState;
     a08:	89 81       	ldd	r24, Y+1	; 0x01
}
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	08 95       	ret

00000a16 <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	2f 93       	push	r18
     a22:	3f 93       	push	r19
     a24:	4f 93       	push	r20
     a26:	5f 93       	push	r21
     a28:	6f 93       	push	r22
     a2a:	7f 93       	push	r23
     a2c:	8f 93       	push	r24
     a2e:	9f 93       	push	r25
     a30:	af 93       	push	r26
     a32:	bf 93       	push	r27
     a34:	ef 93       	push	r30
     a36:	ff 93       	push	r31
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func!=NULL)
     a40:	80 91 80 00 	lds	r24, 0x0080
     a44:	90 91 81 00 	lds	r25, 0x0081
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	29 f0       	breq	.+10     	; 0xa56 <__vector_2+0x40>
		EXTI_pvInt1Func();
     a4c:	e0 91 80 00 	lds	r30, 0x0080
     a50:	f0 91 81 00 	lds	r31, 0x0081
     a54:	09 95       	icall
	else
	{

	}
}
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	ff 91       	pop	r31
     a5c:	ef 91       	pop	r30
     a5e:	bf 91       	pop	r27
     a60:	af 91       	pop	r26
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	7f 91       	pop	r23
     a68:	6f 91       	pop	r22
     a6a:	5f 91       	pop	r21
     a6c:	4f 91       	pop	r20
     a6e:	3f 91       	pop	r19
     a70:	2f 91       	pop	r18
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void){
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
	// set sense control  for INT2
#if INI2_SENSE==FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_INT2);
     a84:	a4 e5       	ldi	r26, 0x54	; 84
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	e4 e5       	ldi	r30, 0x54	; 84
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	80 81       	ld	r24, Z
     a8e:	8f 7b       	andi	r24, 0xBF	; 191
     a90:	8c 93       	st	X, r24
#else
#error "Wrong INI2_SENSE configuration"
#endif
	//interrupt enable for INT1
#if INI2_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT2);
     a92:	ab e5       	ldi	r26, 0x5B	; 91
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	eb e5       	ldi	r30, 0x5B	; 91
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	80 62       	ori	r24, 0x20	; 32
     a9e:	8c 93       	st	X, r24
#elif INI2_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT2);
#else
#error "Wrong INI1_INITIAL_STATE configuration"
#endif
}
     aa0:	cf 91       	pop	r28
     aa2:	df 91       	pop	r29
     aa4:	08 95       	ret

00000aa6 <EXTI_u8Int2SetSenseControl>:

u8 EXTI_u8Int2SetSenseControl(u8 Copy_u8Sense){
     aa6:	df 93       	push	r29
     aa8:	cf 93       	push	r28
     aaa:	00 d0       	rcall	.+0      	; 0xaac <EXTI_u8Int2SetSenseControl+0x6>
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     ab2:	19 82       	std	Y+1, r1	; 0x01

	switch(INI1_SENSE){
	case FALLING_EDGE:
		CLR_BIT(MCUCSR,MCUCSR_INT2);
     ab4:	a4 e5       	ldi	r26, 0x54	; 84
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e4 e5       	ldi	r30, 0x54	; 84
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	8f 7b       	andi	r24, 0xBF	; 191
     ac0:	8c 93       	st	X, r24

	default:
		Local_u8ErrorState=NOK;
		break;
	}
	return Local_u8ErrorState;
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	cf 91       	pop	r28
     aca:	df 91       	pop	r29
     acc:	08 95       	ret

00000ace <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func)(void)){
     ace:	df 93       	push	r29
     ad0:	cf 93       	push	r28
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <EXTI_u8Int2SetCallBack+0x6>
     ad4:	0f 92       	push	r0
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	9b 83       	std	Y+3, r25	; 0x03
     adc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     ade:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func==NULL){
     ae0:	8a 81       	ldd	r24, Y+2	; 0x02
     ae2:	9b 81       	ldd	r25, Y+3	; 0x03
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	19 f4       	brne	.+6      	; 0xaee <EXTI_u8Int2SetCallBack+0x20>
		Local_u8ErrorState=NULL_POINTER;
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	06 c0       	rjmp	.+12     	; 0xafa <EXTI_u8Int2SetCallBack+0x2c>
	}
	else{
		EXTI_pvInt2Func=Copy_pvInt2Func;
     aee:	8a 81       	ldd	r24, Y+2	; 0x02
     af0:	9b 81       	ldd	r25, Y+3	; 0x03
     af2:	90 93 83 00 	sts	0x0083, r25
     af6:	80 93 82 00 	sts	0x0082, r24
	}
	return Local_u8ErrorState;
     afa:	89 81       	ldd	r24, Y+1	; 0x01
}
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	08 95       	ret

00000b08 <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void){
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	2f 93       	push	r18
     b14:	3f 93       	push	r19
     b16:	4f 93       	push	r20
     b18:	5f 93       	push	r21
     b1a:	6f 93       	push	r22
     b1c:	7f 93       	push	r23
     b1e:	8f 93       	push	r24
     b20:	9f 93       	push	r25
     b22:	af 93       	push	r26
     b24:	bf 93       	push	r27
     b26:	ef 93       	push	r30
     b28:	ff 93       	push	r31
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func!=NULL)
     b32:	80 91 82 00 	lds	r24, 0x0082
     b36:	90 91 83 00 	lds	r25, 0x0083
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	29 f0       	breq	.+10     	; 0xb48 <__vector_3+0x40>
		EXTI_pvInt2Func();
     b3e:	e0 91 82 00 	lds	r30, 0x0082
     b42:	f0 91 83 00 	lds	r31, 0x0083
     b46:	09 95       	icall
	else
	{

	}
}
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	ff 91       	pop	r31
     b4e:	ef 91       	pop	r30
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	7f 91       	pop	r23
     b5a:	6f 91       	pop	r22
     b5c:	5f 91       	pop	r21
     b5e:	4f 91       	pop	r20
     b60:	3f 91       	pop	r19
     b62:	2f 91       	pop	r18
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <DIO_u8SetPinValue>:
#include "DIO_interface.h"
#include "DIO_register.h"
#include "DIO_config.h"
#include "DIO_private.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8Value){
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	28 97       	sbiw	r28, 0x08	; 8
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	8a 83       	std	Y+2, r24	; 0x02
     b84:	6b 83       	std	Y+3, r22	; 0x03
     b86:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
     b88:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <DIO_u8SetPinValue+0x24>
     b90:	f4 c0       	rjmp	.+488    	; 0xd7a <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value==DIO_u8PIN_LOW){
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	88 23       	and	r24, r24
     b96:	09 f0       	breq	.+2      	; 0xb9a <DIO_u8SetPinValue+0x2c>
     b98:	77 c0       	rjmp	.+238    	; 0xc88 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	38 87       	std	Y+8, r19	; 0x08
     ba2:	2f 83       	std	Y+7, r18	; 0x07
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	91 05       	cpc	r25, r1
     bac:	59 f1       	breq	.+86     	; 0xc04 <DIO_u8SetPinValue+0x96>
     bae:	2f 81       	ldd	r18, Y+7	; 0x07
     bb0:	38 85       	ldd	r19, Y+8	; 0x08
     bb2:	22 30       	cpi	r18, 0x02	; 2
     bb4:	31 05       	cpc	r19, r1
     bb6:	2c f4       	brge	.+10     	; 0xbc2 <DIO_u8SetPinValue+0x54>
     bb8:	8f 81       	ldd	r24, Y+7	; 0x07
     bba:	98 85       	ldd	r25, Y+8	; 0x08
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	69 f0       	breq	.+26     	; 0xbda <DIO_u8SetPinValue+0x6c>
     bc0:	60 c0       	rjmp	.+192    	; 0xc82 <DIO_u8SetPinValue+0x114>
     bc2:	2f 81       	ldd	r18, Y+7	; 0x07
     bc4:	38 85       	ldd	r19, Y+8	; 0x08
     bc6:	22 30       	cpi	r18, 0x02	; 2
     bc8:	31 05       	cpc	r19, r1
     bca:	89 f1       	breq	.+98     	; 0xc2e <DIO_u8SetPinValue+0xc0>
     bcc:	8f 81       	ldd	r24, Y+7	; 0x07
     bce:	98 85       	ldd	r25, Y+8	; 0x08
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	91 05       	cpc	r25, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <DIO_u8SetPinValue+0x6a>
     bd6:	40 c0       	rjmp	.+128    	; 0xc58 <DIO_u8SetPinValue+0xea>
     bd8:	54 c0       	rjmp	.+168    	; 0xc82 <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA:
				CLR_BIT(PORTA,Copy_u8Pin);
     bda:	ab e3       	ldi	r26, 0x3B	; 59
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	eb e3       	ldi	r30, 0x3B	; 59
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DIO_u8SetPinValue+0x8a>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DIO_u8SetPinValue+0x86>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	bd c0       	rjmp	.+378    	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTB:
				CLR_BIT(PORTB,Copy_u8Pin);
     c04:	a8 e3       	ldi	r26, 0x38	; 56
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e8 e3       	ldi	r30, 0x38	; 56
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_u8SetPinValue+0xb4>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_u8SetPinValue+0xb0>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	a8 c0       	rjmp	.+336    	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTC:
				CLR_BIT(PORTC,Copy_u8Pin);
     c2e:	a5 e3       	ldi	r26, 0x35	; 53
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e5 e3       	ldi	r30, 0x35	; 53
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_u8SetPinValue+0xde>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_u8SetPinValue+0xda>
     c50:	80 95       	com	r24
     c52:	84 23       	and	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	93 c0       	rjmp	.+294    	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTD:
				CLR_BIT(PORTD,Copy_u8Pin);
     c58:	a2 e3       	ldi	r26, 0x32	; 50
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e2 e3       	ldi	r30, 0x32	; 50
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 2e       	mov	r0, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <DIO_u8SetPinValue+0x108>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <DIO_u8SetPinValue+0x104>
     c7a:	80 95       	com	r24
     c7c:	84 23       	and	r24, r20
     c7e:	8c 93       	st	X, r24
     c80:	7e c0       	rjmp	.+252    	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;

			default:
				Local_u8ErrorState=1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	89 83       	std	Y+1, r24	; 0x01
     c86:	7b c0       	rjmp	.+246    	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH){
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	09 f0       	breq	.+2      	; 0xc90 <DIO_u8SetPinValue+0x122>
     c8e:	72 c0       	rjmp	.+228    	; 0xd74 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	3e 83       	std	Y+6, r19	; 0x06
     c98:	2d 83       	std	Y+5, r18	; 0x05
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	91 05       	cpc	r25, r1
     ca2:	49 f1       	breq	.+82     	; 0xcf6 <DIO_u8SetPinValue+0x188>
     ca4:	2d 81       	ldd	r18, Y+5	; 0x05
     ca6:	3e 81       	ldd	r19, Y+6	; 0x06
     ca8:	22 30       	cpi	r18, 0x02	; 2
     caa:	31 05       	cpc	r19, r1
     cac:	2c f4       	brge	.+10     	; 0xcb8 <DIO_u8SetPinValue+0x14a>
     cae:	8d 81       	ldd	r24, Y+5	; 0x05
     cb0:	9e 81       	ldd	r25, Y+6	; 0x06
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	61 f0       	breq	.+24     	; 0xcce <DIO_u8SetPinValue+0x160>
     cb6:	5b c0       	rjmp	.+182    	; 0xd6e <DIO_u8SetPinValue+0x200>
     cb8:	2d 81       	ldd	r18, Y+5	; 0x05
     cba:	3e 81       	ldd	r19, Y+6	; 0x06
     cbc:	22 30       	cpi	r18, 0x02	; 2
     cbe:	31 05       	cpc	r19, r1
     cc0:	71 f1       	breq	.+92     	; 0xd1e <DIO_u8SetPinValue+0x1b0>
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	9e 81       	ldd	r25, Y+6	; 0x06
     cc6:	83 30       	cpi	r24, 0x03	; 3
     cc8:	91 05       	cpc	r25, r1
     cca:	e9 f1       	breq	.+122    	; 0xd46 <DIO_u8SetPinValue+0x1d8>
     ccc:	50 c0       	rjmp	.+160    	; 0xd6e <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA:
				SET_BIT(PORTA,Copy_u8Pin);
     cce:	ab e3       	ldi	r26, 0x3B	; 59
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	eb e3       	ldi	r30, 0x3B	; 59
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_u8SetPinValue+0x17e>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_u8SetPinValue+0x17a>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	44 c0       	rjmp	.+136    	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTB:
				SET_BIT(PORTB,Copy_u8Pin);
     cf6:	a8 e3       	ldi	r26, 0x38	; 56
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e8 e3       	ldi	r30, 0x38	; 56
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_u8SetPinValue+0x1a6>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_u8SetPinValue+0x1a2>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	30 c0       	rjmp	.+96     	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTC:
				SET_BIT(PORTC,Copy_u8Pin);
     d1e:	a5 e3       	ldi	r26, 0x35	; 53
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e3       	ldi	r30, 0x35	; 53
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_u8SetPinValue+0x1ce>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_u8SetPinValue+0x1ca>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	1c c0       	rjmp	.+56     	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTD:
				SET_BIT(PORTD,Copy_u8Pin);
     d46:	a2 e3       	ldi	r26, 0x32	; 50
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e2 e3       	ldi	r30, 0x32	; 50
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	48 2f       	mov	r20, r24
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 2e       	mov	r0, r18
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <DIO_u8SetPinValue+0x1f6>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	0a 94       	dec	r0
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <DIO_u8SetPinValue+0x1f2>
     d68:	84 2b       	or	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;

			default:
				Local_u8ErrorState=1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else{
			Local_u8ErrorState=1;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_u8SetPinValue+0x210>
		}
	}
	else {
		Local_u8ErrorState=1;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d80:	28 96       	adiw	r28, 0x08	; 8
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <DIO_u8SetPortValue+0x6>
     d98:	00 d0       	rcall	.+0      	; 0xd9a <DIO_u8SetPortValue+0x8>
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	8a 83       	std	Y+2, r24	; 0x02
     da2:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorState=0;
     da4:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3d 83       	std	Y+5, r19	; 0x05
     dae:	2c 83       	std	Y+4, r18	; 0x04
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	d1 f0       	breq	.+52     	; 0xdee <DIO_u8SetPortValue+0x5c>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_u8SetPortValue+0x3c>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	61 f0       	breq	.+24     	; 0xde4 <DIO_u8SetPortValue+0x52>
     dcc:	1f c0       	rjmp	.+62     	; 0xe0c <DIO_u8SetPortValue+0x7a>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	81 f0       	breq	.+32     	; 0xdf8 <DIO_u8SetPortValue+0x66>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	81 f0       	breq	.+32     	; 0xe02 <DIO_u8SetPortValue+0x70>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <DIO_u8SetPortValue+0x7a>
	case DIO_u8PORTA:
		PORTA=Copy_u8Value;
     de4:	eb e3       	ldi	r30, 0x3B	; 59
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	80 83       	st	Z, r24
     dec:	11 c0       	rjmp	.+34     	; 0xe10 <DIO_u8SetPortValue+0x7e>
		break;

	case DIO_u8PORTB:
		PORTB=Copy_u8Value;
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	80 83       	st	Z, r24
     df6:	0c c0       	rjmp	.+24     	; 0xe10 <DIO_u8SetPortValue+0x7e>
		break;

	case DIO_u8PORTC:
		PORTC=Copy_u8Value;
     df8:	e5 e3       	ldi	r30, 0x35	; 53
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	80 83       	st	Z, r24
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <DIO_u8SetPortValue+0x7e>
		break;

	case DIO_u8PORTD:
		PORTD=Copy_u8Value;
     e02:	e2 e3       	ldi	r30, 0x32	; 50
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	80 83       	st	Z, r24
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_u8SetPortValue+0x7e>
		break;

	default:
		Local_u8ErrorState=1;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return Local_u8ErrorState;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
}
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin,u8* Copy_pu8Value){
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	27 97       	sbiw	r28, 0x07	; 7
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	8a 83       	std	Y+2, r24	; 0x02
     e38:	6b 83       	std	Y+3, r22	; 0x03
     e3a:	5d 83       	std	Y+5, r21	; 0x05
     e3c:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value!=NULL){
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	09 f4       	brne	.+2      	; 0xe4a <DIO_u8GetPinValue+0x28>
     e48:	7b c0       	rjmp	.+246    	; 0xf40 <DIO_u8GetPinValue+0x11e>
		if(Copy_u8Pin<=DIO_u8PIN7){
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	88 30       	cpi	r24, 0x08	; 8
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <DIO_u8GetPinValue+0x30>
     e50:	74 c0       	rjmp	.+232    	; 0xf3a <DIO_u8GetPinValue+0x118>
			switch(Copy_u8Port){
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3f 83       	std	Y+7, r19	; 0x07
     e5a:	2e 83       	std	Y+6, r18	; 0x06
     e5c:	4e 81       	ldd	r20, Y+6	; 0x06
     e5e:	5f 81       	ldd	r21, Y+7	; 0x07
     e60:	41 30       	cpi	r20, 0x01	; 1
     e62:	51 05       	cpc	r21, r1
     e64:	59 f1       	breq	.+86     	; 0xebc <DIO_u8GetPinValue+0x9a>
     e66:	8e 81       	ldd	r24, Y+6	; 0x06
     e68:	9f 81       	ldd	r25, Y+7	; 0x07
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	91 05       	cpc	r25, r1
     e6e:	34 f4       	brge	.+12     	; 0xe7c <DIO_u8GetPinValue+0x5a>
     e70:	2e 81       	ldd	r18, Y+6	; 0x06
     e72:	3f 81       	ldd	r19, Y+7	; 0x07
     e74:	21 15       	cp	r18, r1
     e76:	31 05       	cpc	r19, r1
     e78:	69 f0       	breq	.+26     	; 0xe94 <DIO_u8GetPinValue+0x72>
     e7a:	5c c0       	rjmp	.+184    	; 0xf34 <DIO_u8GetPinValue+0x112>
     e7c:	4e 81       	ldd	r20, Y+6	; 0x06
     e7e:	5f 81       	ldd	r21, Y+7	; 0x07
     e80:	42 30       	cpi	r20, 0x02	; 2
     e82:	51 05       	cpc	r21, r1
     e84:	79 f1       	breq	.+94     	; 0xee4 <DIO_u8GetPinValue+0xc2>
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	9f 81       	ldd	r25, Y+7	; 0x07
     e8a:	83 30       	cpi	r24, 0x03	; 3
     e8c:	91 05       	cpc	r25, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <DIO_u8GetPinValue+0x70>
     e90:	3d c0       	rjmp	.+122    	; 0xf0c <DIO_u8GetPinValue+0xea>
     e92:	50 c0       	rjmp	.+160    	; 0xf34 <DIO_u8GetPinValue+0x112>
			case DIO_u8PORTA:
				*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);
     e94:	e9 e3       	ldi	r30, 0x39	; 57
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8GetPinValue+0x8a>
     ea8:	55 95       	asr	r21
     eaa:	47 95       	ror	r20
     eac:	8a 95       	dec	r24
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8GetPinValue+0x86>
     eb0:	ca 01       	movw	r24, r20
     eb2:	81 70       	andi	r24, 0x01	; 1
     eb4:	ec 81       	ldd	r30, Y+4	; 0x04
     eb6:	fd 81       	ldd	r31, Y+5	; 0x05
     eb8:	80 83       	st	Z, r24
     eba:	44 c0       	rjmp	.+136    	; 0xf44 <DIO_u8GetPinValue+0x122>
				break;

			case DIO_u8PORTB:
				*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);
     ebc:	e6 e3       	ldi	r30, 0x36	; 54
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	a9 01       	movw	r20, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_u8GetPinValue+0xb2>
     ed0:	55 95       	asr	r21
     ed2:	47 95       	ror	r20
     ed4:	8a 95       	dec	r24
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_u8GetPinValue+0xae>
     ed8:	ca 01       	movw	r24, r20
     eda:	81 70       	andi	r24, 0x01	; 1
     edc:	ec 81       	ldd	r30, Y+4	; 0x04
     ede:	fd 81       	ldd	r31, Y+5	; 0x05
     ee0:	80 83       	st	Z, r24
     ee2:	30 c0       	rjmp	.+96     	; 0xf44 <DIO_u8GetPinValue+0x122>
				break;

			case DIO_u8PORTC:
				*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);
     ee4:	e3 e3       	ldi	r30, 0x33	; 51
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a9 01       	movw	r20, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_u8GetPinValue+0xda>
     ef8:	55 95       	asr	r21
     efa:	47 95       	ror	r20
     efc:	8a 95       	dec	r24
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_u8GetPinValue+0xd6>
     f00:	ca 01       	movw	r24, r20
     f02:	81 70       	andi	r24, 0x01	; 1
     f04:	ec 81       	ldd	r30, Y+4	; 0x04
     f06:	fd 81       	ldd	r31, Y+5	; 0x05
     f08:	80 83       	st	Z, r24
     f0a:	1c c0       	rjmp	.+56     	; 0xf44 <DIO_u8GetPinValue+0x122>
				break;

			case DIO_u8PORTD:
				*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);
     f0c:	e0 e3       	ldi	r30, 0x30	; 48
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a9 01       	movw	r20, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_u8GetPinValue+0x102>
     f20:	55 95       	asr	r21
     f22:	47 95       	ror	r20
     f24:	8a 95       	dec	r24
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_u8GetPinValue+0xfe>
     f28:	ca 01       	movw	r24, r20
     f2a:	81 70       	andi	r24, 0x01	; 1
     f2c:	ec 81       	ldd	r30, Y+4	; 0x04
     f2e:	fd 81       	ldd	r31, Y+5	; 0x05
     f30:	80 83       	st	Z, r24
     f32:	08 c0       	rjmp	.+16     	; 0xf44 <DIO_u8GetPinValue+0x122>
				break;

			default:
				Local_u8ErrorState=1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <DIO_u8GetPinValue+0x122>
				break;
			}
		}
		else{
			Local_u8ErrorState=1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_u8GetPinValue+0x122>
		}
	}
	else{
		Local_u8ErrorState=1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     f44:	89 81       	ldd	r24, Y+1	; 0x01
}
     f46:	27 96       	adiw	r28, 0x07	; 7
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <DIO_u8GetPortValue+0x6>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <DIO_u8GetPortValue+0x8>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <DIO_u8GetPortValue+0xa>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	7c 83       	std	Y+4, r23	; 0x04
     f6a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     f6c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value!=NULL){
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	09 f4       	brne	.+2      	; 0xf78 <DIO_u8GetPortValue+0x20>
     f76:	3e c0       	rjmp	.+124    	; 0xff4 <DIO_u8GetPortValue+0x9c>

			switch(Copy_u8Port){
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3e 83       	std	Y+6, r19	; 0x06
     f80:	2d 83       	std	Y+5, r18	; 0x05
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	e1 f0       	breq	.+56     	; 0xfc4 <DIO_u8GetPortValue+0x6c>
     f8c:	2d 81       	ldd	r18, Y+5	; 0x05
     f8e:	3e 81       	ldd	r19, Y+6	; 0x06
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	2c f4       	brge	.+10     	; 0xfa0 <DIO_u8GetPortValue+0x48>
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	61 f0       	breq	.+24     	; 0xfb6 <DIO_u8GetPortValue+0x5e>
     f9e:	27 c0       	rjmp	.+78     	; 0xfee <DIO_u8GetPortValue+0x96>
     fa0:	2d 81       	ldd	r18, Y+5	; 0x05
     fa2:	3e 81       	ldd	r19, Y+6	; 0x06
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	a1 f0       	breq	.+40     	; 0xfd2 <DIO_u8GetPortValue+0x7a>
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	91 05       	cpc	r25, r1
     fb2:	b1 f0       	breq	.+44     	; 0xfe0 <DIO_u8GetPortValue+0x88>
     fb4:	1c c0       	rjmp	.+56     	; 0xfee <DIO_u8GetPortValue+0x96>
			case DIO_u8PORTA:
				*Copy_pu8Value=PINA;
     fb6:	e9 e3       	ldi	r30, 0x39	; 57
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	eb 81       	ldd	r30, Y+3	; 0x03
     fbe:	fc 81       	ldd	r31, Y+4	; 0x04
     fc0:	80 83       	st	Z, r24
     fc2:	1a c0       	rjmp	.+52     	; 0xff8 <DIO_u8GetPortValue+0xa0>
				break;

			case DIO_u8PORTB:
				*Copy_pu8Value=PINB;
     fc4:	e6 e3       	ldi	r30, 0x36	; 54
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	eb 81       	ldd	r30, Y+3	; 0x03
     fcc:	fc 81       	ldd	r31, Y+4	; 0x04
     fce:	80 83       	st	Z, r24
     fd0:	13 c0       	rjmp	.+38     	; 0xff8 <DIO_u8GetPortValue+0xa0>
				break;

			case DIO_u8PORTC:
				*Copy_pu8Value=PINC;
     fd2:	e3 e3       	ldi	r30, 0x33	; 51
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	eb 81       	ldd	r30, Y+3	; 0x03
     fda:	fc 81       	ldd	r31, Y+4	; 0x04
     fdc:	80 83       	st	Z, r24
     fde:	0c c0       	rjmp	.+24     	; 0xff8 <DIO_u8GetPortValue+0xa0>
				break;

			case DIO_u8PORTD:
				*Copy_pu8Value=PIND;
     fe0:	e0 e3       	ldi	r30, 0x30	; 48
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	eb 81       	ldd	r30, Y+3	; 0x03
     fe8:	fc 81       	ldd	r31, Y+4	; 0x04
     fea:	80 83       	st	Z, r24
     fec:	05 c0       	rjmp	.+10     	; 0xff8 <DIO_u8GetPortValue+0xa0>
				break;

			default:
				Local_u8ErrorState=1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_u8GetPortValue+0xa0>
				break;
			}
		}
		else{
			Local_u8ErrorState=1;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8ErrorState;
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
}
     ffa:	26 96       	adiw	r28, 0x06	; 6
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <LED_u8TurnOn>:
#include "../MCAL/DIO/DIO_interface.h"
#include "LED_interface.h"
#include "LED_private.h"
#include "LED_config.h"

u8 LED_u8TurnOn(LED* Copy_structLedProp){
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	27 97       	sbiw	r28, 0x07	; 7
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	9b 83       	std	Y+3, r25	; 0x03
    1022:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1024:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_structLedProp->LED_u8Pin<=DIO_u8PIN7){
    1026:	ea 81       	ldd	r30, Y+2	; 0x02
    1028:	fb 81       	ldd	r31, Y+3	; 0x03
    102a:	81 81       	ldd	r24, Z+1	; 0x01
    102c:	88 30       	cpi	r24, 0x08	; 8
    102e:	08 f0       	brcs	.+2      	; 0x1032 <LED_u8TurnOn+0x26>
    1030:	9f c0       	rjmp	.+318    	; 0x1170 <LED_u8TurnOn+0x164>
		if(Copy_structLedProp->LED_u8ConnType==LED_u8SOURCE){
    1032:	ea 81       	ldd	r30, Y+2	; 0x02
    1034:	fb 81       	ldd	r31, Y+3	; 0x03
    1036:	82 81       	ldd	r24, Z+2	; 0x02
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	09 f0       	breq	.+2      	; 0x103e <LED_u8TurnOn+0x32>
    103c:	48 c0       	rjmp	.+144    	; 0x10ce <LED_u8TurnOn+0xc2>
			switch(Copy_structLedProp->LED_u8Port){
    103e:	ea 81       	ldd	r30, Y+2	; 0x02
    1040:	fb 81       	ldd	r31, Y+3	; 0x03
    1042:	80 81       	ld	r24, Z
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3f 83       	std	Y+7, r19	; 0x07
    104a:	2e 83       	std	Y+6, r18	; 0x06
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	f1 f0       	breq	.+60     	; 0x1092 <LED_u8TurnOn+0x86>
    1056:	2e 81       	ldd	r18, Y+6	; 0x06
    1058:	3f 81       	ldd	r19, Y+7	; 0x07
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	2c f4       	brge	.+10     	; 0x106a <LED_u8TurnOn+0x5e>
    1060:	8e 81       	ldd	r24, Y+6	; 0x06
    1062:	9f 81       	ldd	r25, Y+7	; 0x07
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	61 f0       	breq	.+24     	; 0x1080 <LED_u8TurnOn+0x74>
    1068:	2f c0       	rjmp	.+94     	; 0x10c8 <LED_u8TurnOn+0xbc>
    106a:	2e 81       	ldd	r18, Y+6	; 0x06
    106c:	3f 81       	ldd	r19, Y+7	; 0x07
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	c1 f0       	breq	.+48     	; 0x10a4 <LED_u8TurnOn+0x98>
    1074:	8e 81       	ldd	r24, Y+6	; 0x06
    1076:	9f 81       	ldd	r25, Y+7	; 0x07
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	91 05       	cpc	r25, r1
    107c:	e1 f0       	breq	.+56     	; 0x10b6 <LED_u8TurnOn+0xaa>
    107e:	24 c0       	rjmp	.+72     	; 0x10c8 <LED_u8TurnOn+0xbc>
			case DIO_u8PORTA :DIO_u8SetPinValue(DIO_u8PORTA ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_HIGH);break;
    1080:	ea 81       	ldd	r30, Y+2	; 0x02
    1082:	fb 81       	ldd	r31, Y+3	; 0x03
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	69 2f       	mov	r22, r25
    108a:	41 e0       	ldi	r20, 0x01	; 1
    108c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    1090:	71 c0       	rjmp	.+226    	; 0x1174 <LED_u8TurnOn+0x168>
			case DIO_u8PORTB :DIO_u8SetPinValue(DIO_u8PORTB ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_HIGH);break;
    1092:	ea 81       	ldd	r30, Y+2	; 0x02
    1094:	fb 81       	ldd	r31, Y+3	; 0x03
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	69 2f       	mov	r22, r25
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    10a2:	68 c0       	rjmp	.+208    	; 0x1174 <LED_u8TurnOn+0x168>
			case DIO_u8PORTC :DIO_u8SetPinValue(DIO_u8PORTC ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_HIGH);break;
    10a4:	ea 81       	ldd	r30, Y+2	; 0x02
    10a6:	fb 81       	ldd	r31, Y+3	; 0x03
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	69 2f       	mov	r22, r25
    10ae:	41 e0       	ldi	r20, 0x01	; 1
    10b0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    10b4:	5f c0       	rjmp	.+190    	; 0x1174 <LED_u8TurnOn+0x168>
			case DIO_u8PORTD :DIO_u8SetPinValue(DIO_u8PORTD ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_HIGH);break;
    10b6:	ea 81       	ldd	r30, Y+2	; 0x02
    10b8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	69 2f       	mov	r22, r25
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    10c6:	56 c0       	rjmp	.+172    	; 0x1174 <LED_u8TurnOn+0x168>
			default:Local_u8ErrorState=1;break;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	53 c0       	rjmp	.+166    	; 0x1174 <LED_u8TurnOn+0x168>
			}
		}
		else if(Copy_structLedProp->LED_u8ConnType==LED_u8SYNC){
    10ce:	ea 81       	ldd	r30, Y+2	; 0x02
    10d0:	fb 81       	ldd	r31, Y+3	; 0x03
    10d2:	82 81       	ldd	r24, Z+2	; 0x02
    10d4:	88 23       	and	r24, r24
    10d6:	09 f0       	breq	.+2      	; 0x10da <LED_u8TurnOn+0xce>
    10d8:	48 c0       	rjmp	.+144    	; 0x116a <LED_u8TurnOn+0x15e>
			switch(Copy_structLedProp->LED_u8Port){
    10da:	ea 81       	ldd	r30, Y+2	; 0x02
    10dc:	fb 81       	ldd	r31, Y+3	; 0x03
    10de:	80 81       	ld	r24, Z
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3d 83       	std	Y+5, r19	; 0x05
    10e6:	2c 83       	std	Y+4, r18	; 0x04
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	f1 f0       	breq	.+60     	; 0x112e <LED_u8TurnOn+0x122>
    10f2:	2c 81       	ldd	r18, Y+4	; 0x04
    10f4:	3d 81       	ldd	r19, Y+5	; 0x05
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <LED_u8TurnOn+0xfa>
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	61 f0       	breq	.+24     	; 0x111c <LED_u8TurnOn+0x110>
    1104:	2f c0       	rjmp	.+94     	; 0x1164 <LED_u8TurnOn+0x158>
    1106:	2c 81       	ldd	r18, Y+4	; 0x04
    1108:	3d 81       	ldd	r19, Y+5	; 0x05
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	c1 f0       	breq	.+48     	; 0x1140 <LED_u8TurnOn+0x134>
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	91 05       	cpc	r25, r1
    1118:	e1 f0       	breq	.+56     	; 0x1152 <LED_u8TurnOn+0x146>
    111a:	24 c0       	rjmp	.+72     	; 0x1164 <LED_u8TurnOn+0x158>
			case DIO_u8PORTA :DIO_u8SetPinValue(DIO_u8PORTA ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_LOW);break;
    111c:	ea 81       	ldd	r30, Y+2	; 0x02
    111e:	fb 81       	ldd	r31, Y+3	; 0x03
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	69 2f       	mov	r22, r25
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    112c:	23 c0       	rjmp	.+70     	; 0x1174 <LED_u8TurnOn+0x168>
			case DIO_u8PORTB :DIO_u8SetPinValue(DIO_u8PORTB ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_LOW);break;
    112e:	ea 81       	ldd	r30, Y+2	; 0x02
    1130:	fb 81       	ldd	r31, Y+3	; 0x03
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	69 2f       	mov	r22, r25
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    113e:	1a c0       	rjmp	.+52     	; 0x1174 <LED_u8TurnOn+0x168>
			case DIO_u8PORTC :DIO_u8SetPinValue(DIO_u8PORTC ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_LOW);break;
    1140:	ea 81       	ldd	r30, Y+2	; 0x02
    1142:	fb 81       	ldd	r31, Y+3	; 0x03
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	69 2f       	mov	r22, r25
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    1150:	11 c0       	rjmp	.+34     	; 0x1174 <LED_u8TurnOn+0x168>
			case DIO_u8PORTD :DIO_u8SetPinValue(DIO_u8PORTD ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_LOW);break;
    1152:	ea 81       	ldd	r30, Y+2	; 0x02
    1154:	fb 81       	ldd	r31, Y+3	; 0x03
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	69 2f       	mov	r22, r25
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    1162:	08 c0       	rjmp	.+16     	; 0x1174 <LED_u8TurnOn+0x168>
			default:Local_u8ErrorState=1;break;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <LED_u8TurnOn+0x168>
			}
		}
		else{
			Local_u8ErrorState=1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <LED_u8TurnOn+0x168>
		}
	}
	else{
		Local_u8ErrorState=1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
}
    1176:	27 96       	adiw	r28, 0x07	; 7
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <LED_u8TurnOff>:

u8 LED_u8TurnOff(LED *Copy_structLedProp){
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	27 97       	sbiw	r28, 0x07	; 7
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	9b 83       	std	Y+3, r25	; 0x03
    119e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    11a0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_structLedProp->LED_u8Pin<=DIO_u8PIN7){
    11a2:	ea 81       	ldd	r30, Y+2	; 0x02
    11a4:	fb 81       	ldd	r31, Y+3	; 0x03
    11a6:	81 81       	ldd	r24, Z+1	; 0x01
    11a8:	88 30       	cpi	r24, 0x08	; 8
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <LED_u8TurnOff+0x26>
    11ac:	9f c0       	rjmp	.+318    	; 0x12ec <LED_u8TurnOff+0x164>
		if(Copy_structLedProp->LED_u8ConnType==LED_u8SOURCE){
    11ae:	ea 81       	ldd	r30, Y+2	; 0x02
    11b0:	fb 81       	ldd	r31, Y+3	; 0x03
    11b2:	82 81       	ldd	r24, Z+2	; 0x02
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	09 f0       	breq	.+2      	; 0x11ba <LED_u8TurnOff+0x32>
    11b8:	48 c0       	rjmp	.+144    	; 0x124a <LED_u8TurnOff+0xc2>
			switch(Copy_structLedProp->LED_u8Port){
    11ba:	ea 81       	ldd	r30, Y+2	; 0x02
    11bc:	fb 81       	ldd	r31, Y+3	; 0x03
    11be:	80 81       	ld	r24, Z
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3f 83       	std	Y+7, r19	; 0x07
    11c6:	2e 83       	std	Y+6, r18	; 0x06
    11c8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ca:	9f 81       	ldd	r25, Y+7	; 0x07
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	91 05       	cpc	r25, r1
    11d0:	f1 f0       	breq	.+60     	; 0x120e <LED_u8TurnOff+0x86>
    11d2:	2e 81       	ldd	r18, Y+6	; 0x06
    11d4:	3f 81       	ldd	r19, Y+7	; 0x07
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	2c f4       	brge	.+10     	; 0x11e6 <LED_u8TurnOff+0x5e>
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	61 f0       	breq	.+24     	; 0x11fc <LED_u8TurnOff+0x74>
    11e4:	2f c0       	rjmp	.+94     	; 0x1244 <LED_u8TurnOff+0xbc>
    11e6:	2e 81       	ldd	r18, Y+6	; 0x06
    11e8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	c1 f0       	breq	.+48     	; 0x1220 <LED_u8TurnOff+0x98>
    11f0:	8e 81       	ldd	r24, Y+6	; 0x06
    11f2:	9f 81       	ldd	r25, Y+7	; 0x07
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	e1 f0       	breq	.+56     	; 0x1232 <LED_u8TurnOff+0xaa>
    11fa:	24 c0       	rjmp	.+72     	; 0x1244 <LED_u8TurnOff+0xbc>
			case DIO_u8PORTA :DIO_u8SetPinValue(DIO_u8PORTA ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_LOW);break;
    11fc:	ea 81       	ldd	r30, Y+2	; 0x02
    11fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	69 2f       	mov	r22, r25
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    120c:	71 c0       	rjmp	.+226    	; 0x12f0 <LED_u8TurnOff+0x168>
			case DIO_u8PORTB :DIO_u8SetPinValue(DIO_u8PORTB ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_LOW);break;
    120e:	ea 81       	ldd	r30, Y+2	; 0x02
    1210:	fb 81       	ldd	r31, Y+3	; 0x03
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	69 2f       	mov	r22, r25
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    121e:	68 c0       	rjmp	.+208    	; 0x12f0 <LED_u8TurnOff+0x168>
			case DIO_u8PORTC :DIO_u8SetPinValue(DIO_u8PORTC ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_LOW);break;
    1220:	ea 81       	ldd	r30, Y+2	; 0x02
    1222:	fb 81       	ldd	r31, Y+3	; 0x03
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	69 2f       	mov	r22, r25
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    1230:	5f c0       	rjmp	.+190    	; 0x12f0 <LED_u8TurnOff+0x168>
			case DIO_u8PORTD :DIO_u8SetPinValue(DIO_u8PORTD ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_LOW);break;
    1232:	ea 81       	ldd	r30, Y+2	; 0x02
    1234:	fb 81       	ldd	r31, Y+3	; 0x03
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	69 2f       	mov	r22, r25
    123c:	40 e0       	ldi	r20, 0x00	; 0
    123e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    1242:	56 c0       	rjmp	.+172    	; 0x12f0 <LED_u8TurnOff+0x168>
			default:Local_u8ErrorState=1;break;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	53 c0       	rjmp	.+166    	; 0x12f0 <LED_u8TurnOff+0x168>
			}
		}
		else if(Copy_structLedProp->LED_u8ConnType==LED_u8SYNC){
    124a:	ea 81       	ldd	r30, Y+2	; 0x02
    124c:	fb 81       	ldd	r31, Y+3	; 0x03
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	88 23       	and	r24, r24
    1252:	09 f0       	breq	.+2      	; 0x1256 <LED_u8TurnOff+0xce>
    1254:	48 c0       	rjmp	.+144    	; 0x12e6 <LED_u8TurnOff+0x15e>
			switch(Copy_structLedProp->LED_u8Port){
    1256:	ea 81       	ldd	r30, Y+2	; 0x02
    1258:	fb 81       	ldd	r31, Y+3	; 0x03
    125a:	80 81       	ld	r24, Z
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3d 83       	std	Y+5, r19	; 0x05
    1262:	2c 83       	std	Y+4, r18	; 0x04
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	f1 f0       	breq	.+60     	; 0x12aa <LED_u8TurnOff+0x122>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	2c f4       	brge	.+10     	; 0x1282 <LED_u8TurnOff+0xfa>
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	61 f0       	breq	.+24     	; 0x1298 <LED_u8TurnOff+0x110>
    1280:	2f c0       	rjmp	.+94     	; 0x12e0 <LED_u8TurnOff+0x158>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	c1 f0       	breq	.+48     	; 0x12bc <LED_u8TurnOff+0x134>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	e1 f0       	breq	.+56     	; 0x12ce <LED_u8TurnOff+0x146>
    1296:	24 c0       	rjmp	.+72     	; 0x12e0 <LED_u8TurnOff+0x158>
			case DIO_u8PORTA :DIO_u8SetPinValue(DIO_u8PORTA ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_HIGH);break;
    1298:	ea 81       	ldd	r30, Y+2	; 0x02
    129a:	fb 81       	ldd	r31, Y+3	; 0x03
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	69 2f       	mov	r22, r25
    12a2:	41 e0       	ldi	r20, 0x01	; 1
    12a4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    12a8:	23 c0       	rjmp	.+70     	; 0x12f0 <LED_u8TurnOff+0x168>
			case DIO_u8PORTB :DIO_u8SetPinValue(DIO_u8PORTB ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_HIGH);break;
    12aa:	ea 81       	ldd	r30, Y+2	; 0x02
    12ac:	fb 81       	ldd	r31, Y+3	; 0x03
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	69 2f       	mov	r22, r25
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    12ba:	1a c0       	rjmp	.+52     	; 0x12f0 <LED_u8TurnOff+0x168>
			case DIO_u8PORTC :DIO_u8SetPinValue(DIO_u8PORTC ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_HIGH);break;
    12bc:	ea 81       	ldd	r30, Y+2	; 0x02
    12be:	fb 81       	ldd	r31, Y+3	; 0x03
    12c0:	91 81       	ldd	r25, Z+1	; 0x01
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	69 2f       	mov	r22, r25
    12c6:	41 e0       	ldi	r20, 0x01	; 1
    12c8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    12cc:	11 c0       	rjmp	.+34     	; 0x12f0 <LED_u8TurnOff+0x168>
			case DIO_u8PORTD :DIO_u8SetPinValue(DIO_u8PORTD ,Copy_structLedProp->LED_u8Pin,DIO_u8PIN_HIGH);break;
    12ce:	ea 81       	ldd	r30, Y+2	; 0x02
    12d0:	fb 81       	ldd	r31, Y+3	; 0x03
    12d2:	91 81       	ldd	r25, Z+1	; 0x01
    12d4:	83 e0       	ldi	r24, 0x03	; 3
    12d6:	69 2f       	mov	r22, r25
    12d8:	41 e0       	ldi	r20, 0x01	; 1
    12da:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_u8SetPinValue>
    12de:	08 c0       	rjmp	.+16     	; 0x12f0 <LED_u8TurnOff+0x168>
			default:Local_u8ErrorState=1;break;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <LED_u8TurnOff+0x168>
			}
		}
		else{
			Local_u8ErrorState=1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <LED_u8TurnOff+0x168>
		}
	}
	else{
		Local_u8ErrorState=1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	27 96       	adiw	r28, 0x07	; 7
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <LED_voidToggle>:

void LED_voidToggle(LED* Copy_u8LED)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	29 97       	sbiw	r28, 0x09	; 9
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	9b 83       	std	Y+3, r25	; 0x03
    131a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinState;
	DIO_u8GetPinValue(Copy_u8LED->LED_u8Port,Copy_u8LED->LED_u8Pin,&Local_u8PinState);
    131c:	ea 81       	ldd	r30, Y+2	; 0x02
    131e:	fb 81       	ldd	r31, Y+3	; 0x03
    1320:	80 81       	ld	r24, Z
    1322:	ea 81       	ldd	r30, Y+2	; 0x02
    1324:	fb 81       	ldd	r31, Y+3	; 0x03
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	69 2f       	mov	r22, r25
    132a:	9e 01       	movw	r18, r28
    132c:	2f 5f       	subi	r18, 0xFF	; 255
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	a9 01       	movw	r20, r18
    1332:	0e 94 11 07 	call	0xe22	; 0xe22 <DIO_u8GetPinValue>

	switch(Copy_u8LED->LED_u8ConnType)
    1336:	ea 81       	ldd	r30, Y+2	; 0x02
    1338:	fb 81       	ldd	r31, Y+3	; 0x03
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	39 87       	std	Y+9, r19	; 0x09
    1342:	28 87       	std	Y+8, r18	; 0x08
    1344:	88 85       	ldd	r24, Y+8	; 0x08
    1346:	99 85       	ldd	r25, Y+9	; 0x09
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	f1 f0       	breq	.+60     	; 0x1388 <LED_voidToggle+0x84>
    134c:	28 85       	ldd	r18, Y+8	; 0x08
    134e:	39 85       	ldd	r19, Y+9	; 0x09
    1350:	21 30       	cpi	r18, 0x01	; 1
    1352:	31 05       	cpc	r19, r1
    1354:	89 f5       	brne	.+98     	; 0x13b8 <LED_voidToggle+0xb4>
	{
		case LED_u8SOURCE:
			switch(Local_u8PinState)
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3f 83       	std	Y+7, r19	; 0x07
    135e:	2e 83       	std	Y+6, r18	; 0x06
    1360:	8e 81       	ldd	r24, Y+6	; 0x06
    1362:	9f 81       	ldd	r25, Y+7	; 0x07
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	31 f0       	breq	.+12     	; 0x1374 <LED_voidToggle+0x70>
    1368:	2e 81       	ldd	r18, Y+6	; 0x06
    136a:	3f 81       	ldd	r19, Y+7	; 0x07
    136c:	21 30       	cpi	r18, 0x01	; 1
    136e:	31 05       	cpc	r19, r1
    1370:	31 f0       	breq	.+12     	; 0x137e <LED_voidToggle+0x7a>
    1372:	22 c0       	rjmp	.+68     	; 0x13b8 <LED_voidToggle+0xb4>
			{
				case 0: LED_u8TurnOn(Copy_u8LED); break;
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
    137c:	1d c0       	rjmp	.+58     	; 0x13b8 <LED_voidToggle+0xb4>
				case 1: LED_u8TurnOff(Copy_u8LED); break;
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	9b 81       	ldd	r25, Y+3	; 0x03
    1382:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
    1386:	18 c0       	rjmp	.+48     	; 0x13b8 <LED_voidToggle+0xb4>
			}
			break;
		case LED_u8SYNC:
			switch(Local_u8PinState)
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3d 83       	std	Y+5, r19	; 0x05
    1390:	2c 83       	std	Y+4, r18	; 0x04
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	31 f0       	breq	.+12     	; 0x13a6 <LED_voidToggle+0xa2>
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	21 30       	cpi	r18, 0x01	; 1
    13a0:	31 05       	cpc	r19, r1
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <LED_voidToggle+0xac>
    13a4:	09 c0       	rjmp	.+18     	; 0x13b8 <LED_voidToggle+0xb4>
			{
				case 0: LED_u8TurnOff(Copy_u8LED); break;
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <LED_voidToggle+0xb4>
				case 1: LED_u8TurnOn(Copy_u8LED); break;
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
			}
			break;
	}
}
    13b8:	29 96       	adiw	r28, 0x09	; 9
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <AppInit>:

LED LED_GREEN_PEDESTRIAN = {DIO_u8PORTB,DIO_u8PIN0,LED_u8SOURCE};
LED LED_YELLOW_PEDESTRIAN = {DIO_u8PORTB,DIO_u8PIN1,LED_u8SOURCE};
LED LED_RED_PEDESTRIAN = {DIO_u8PORTB,DIO_u8PIN2,LED_u8SOURCE};

void AppInit(void){
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    13d2:	0e 94 75 03 	call	0x6ea	; 0x6ea <PORT_voidInit>
	TIMER0_u8Init();
    13d6:	0e 94 65 00 	call	0xca	; 0xca <TIMER0_u8Init>
	GIE_viodEnable();
    13da:	0e 94 98 03 	call	0x730	; 0x730 <GIE_viodEnable>
	EXTI_voidInt0Init();
    13de:	0e 94 30 04 	call	0x860	; 0x860 <EXTI_voidInt0Init>
	EXTI_u8Int0SetCallBack(&IntISR);
    13e2:	8d e0       	ldi	r24, 0x0D	; 13
    13e4:	9a e0       	ldi	r25, 0x0A	; 10
    13e6:	0e 94 67 04 	call	0x8ce	; 0x8ce <EXTI_u8Int0SetCallBack>
	LED_u8TurnOff(&LED_GREEN_PEDESTRIAN);
    13ea:	8b e6       	ldi	r24, 0x6B	; 107
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
	LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
    13f2:	8e e6       	ldi	r24, 0x6E	; 110
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
	LED_u8TurnOn(&LED_RED_PEDESTRIAN);
    13fa:	81 e7       	ldi	r24, 0x71	; 113
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
}
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <AppStart>:

void AppStart(void){
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
	NormalMode();
    1410:	0e 94 4c 0b 	call	0x1698	; 0x1698 <NormalMode>
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <IntISR>:


void IntISR(void){
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <IntISR+0x6>
    1420:	0f 92       	push	r0
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	TIMER0_u8DelayBusyWait(1000000);
    1426:	60 e4       	ldi	r22, 0x40	; 64
    1428:	72 e4       	ldi	r23, 0x42	; 66
    142a:	8f e0       	ldi	r24, 0x0F	; 15
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
	u8 Button=0;
    1432:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Button);
    1434:	83 e0       	ldi	r24, 0x03	; 3
    1436:	62 e0       	ldi	r22, 0x02	; 2
    1438:	9e 01       	movw	r18, r28
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	a9 01       	movw	r20, r18
    1440:	0e 94 11 07 	call	0xe22	; 0xe22 <DIO_u8GetPinValue>
	if(Button==0){
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	88 23       	and	r24, r24
    1448:	09 f4       	brne	.+2      	; 0x144c <IntISR+0x32>
    144a:	20 c1       	rjmp	.+576    	; 0x168c <IntISR+0x272>
		//DO NOTHING
	}
	else{
		switch(CarLight){
    144c:	80 91 60 00 	lds	r24, 0x0060
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3b 83       	std	Y+3, r19	; 0x03
    1456:	2a 83       	std	Y+2, r18	; 0x02
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	9b 81       	ldd	r25, Y+3	; 0x03
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	0c f4       	brge	.+2      	; 0x1464 <IntISR+0x4a>
    1462:	9f c0       	rjmp	.+318    	; 0x15a2 <IntISR+0x188>
    1464:	2a 81       	ldd	r18, Y+2	; 0x02
    1466:	3b 81       	ldd	r19, Y+3	; 0x03
    1468:	23 30       	cpi	r18, 0x03	; 3
    146a:	31 05       	cpc	r19, r1
    146c:	3c f0       	brlt	.+14     	; 0x147c <IntISR+0x62>
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	9b 81       	ldd	r25, Y+3	; 0x03
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <IntISR+0x60>
    1478:	76 c0       	rjmp	.+236    	; 0x1566 <IntISR+0x14c>
    147a:	93 c0       	rjmp	.+294    	; 0x15a2 <IntISR+0x188>
		case GREEN_CAR ... YELLOW_CAR:
		LED_u8TurnOff(&LED_GREEN_CARS);
    147c:	82 e6       	ldi	r24, 0x62	; 98
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOn(&LED_YELLOW_CARS);
    1484:	85 e6       	ldi	r24, 0x65	; 101
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		LED_u8TurnOff(&LED_RED_CARS);
    148c:	88 e6       	ldi	r24, 0x68	; 104
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>

		LED_u8TurnOff(&LED_GREEN_PEDESTRIAN);
    1494:	8b e6       	ldi	r24, 0x6B	; 107
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOn(&LED_YELLOW_PEDESTRIAN);
    149c:	8e e6       	ldi	r24, 0x6E	; 110
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		LED_u8TurnOn(&LED_RED_PEDESTRIAN);
    14a4:	81 e7       	ldi	r24, 0x71	; 113
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		TIMER0_u8DelayBusyWait(1000000);
    14ac:	60 e4       	ldi	r22, 0x40	; 64
    14ae:	72 e4       	ldi	r23, 0x42	; 66
    14b0:	8f e0       	ldi	r24, 0x0F	; 15
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    14b8:	85 e6       	ldi	r24, 0x65	; 101
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
    14c0:	8e e6       	ldi	r24, 0x6E	; 110
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    14c8:	60 e4       	ldi	r22, 0x40	; 64
    14ca:	72 e4       	ldi	r23, 0x42	; 66
    14cc:	8f e0       	ldi	r24, 0x0F	; 15
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    14d4:	85 e6       	ldi	r24, 0x65	; 101
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
    14dc:	8e e6       	ldi	r24, 0x6E	; 110
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    14e4:	60 e4       	ldi	r22, 0x40	; 64
    14e6:	72 e4       	ldi	r23, 0x42	; 66
    14e8:	8f e0       	ldi	r24, 0x0F	; 15
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    14f0:	85 e6       	ldi	r24, 0x65	; 101
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
    14f8:	8e e6       	ldi	r24, 0x6E	; 110
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    1500:	60 e4       	ldi	r22, 0x40	; 64
    1502:	72 e4       	ldi	r23, 0x42	; 66
    1504:	8f e0       	ldi	r24, 0x0F	; 15
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    150c:	85 e6       	ldi	r24, 0x65	; 101
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
    1514:	8e e6       	ldi	r24, 0x6E	; 110
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    151c:	60 e4       	ldi	r22, 0x40	; 64
    151e:	72 e4       	ldi	r23, 0x42	; 66
    1520:	8f e0       	ldi	r24, 0x0F	; 15
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>

		LED_u8TurnOff(&LED_GREEN_CARS);
    1528:	82 e6       	ldi	r24, 0x62	; 98
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_YELLOW_CARS);
    1530:	85 e6       	ldi	r24, 0x65	; 101
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOn(&LED_RED_CARS);
    1538:	88 e6       	ldi	r24, 0x68	; 104
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>

		LED_u8TurnOn(&LED_GREEN_PEDESTRIAN);
    1540:	8b e6       	ldi	r24, 0x6B	; 107
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
    1548:	8e e6       	ldi	r24, 0x6E	; 110
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_RED_PEDESTRIAN);
    1550:	81 e7       	ldi	r24, 0x71	; 113
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		TIMER0_u8DelayBusyWait(5000000);
    1558:	60 e4       	ldi	r22, 0x40	; 64
    155a:	7b e4       	ldi	r23, 0x4B	; 75
    155c:	8c e4       	ldi	r24, 0x4C	; 76
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
    1564:	1e c0       	rjmp	.+60     	; 0x15a2 <IntISR+0x188>
		break;

		case RED_CAR:
			LED_u8TurnOff(&LED_GREEN_CARS);
    1566:	82 e6       	ldi	r24, 0x62	; 98
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
			LED_u8TurnOff(&LED_YELLOW_CARS);
    156e:	85 e6       	ldi	r24, 0x65	; 101
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
			LED_u8TurnOn(&LED_RED_CARS);
    1576:	88 e6       	ldi	r24, 0x68	; 104
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>

			LED_u8TurnOn(&LED_GREEN_PEDESTRIAN);
    157e:	8b e6       	ldi	r24, 0x6B	; 107
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
			LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
    1586:	8e e6       	ldi	r24, 0x6E	; 110
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
			LED_u8TurnOff(&LED_RED_PEDESTRIAN);
    158e:	81 e7       	ldi	r24, 0x71	; 113
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
			TIMER0_u8DelayBusyWait(5000000);
    1596:	60 e4       	ldi	r22, 0x40	; 64
    1598:	7b e4       	ldi	r23, 0x4B	; 75
    159a:	8c e4       	ldi	r24, 0x4C	; 76
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
			break;
		}
		LED_u8TurnOff(&LED_GREEN_CARS);
    15a2:	82 e6       	ldi	r24, 0x62	; 98
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOn(&LED_YELLOW_CARS);
    15aa:	85 e6       	ldi	r24, 0x65	; 101
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		LED_u8TurnOff(&LED_RED_CARS);
    15b2:	88 e6       	ldi	r24, 0x68	; 104
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>

		LED_u8TurnOn(&LED_GREEN_PEDESTRIAN);
    15ba:	8b e6       	ldi	r24, 0x6B	; 107
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		LED_u8TurnOn(&LED_YELLOW_PEDESTRIAN);
    15c2:	8e e6       	ldi	r24, 0x6E	; 110
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		LED_u8TurnOff(&LED_RED_PEDESTRIAN);
    15ca:	81 e7       	ldi	r24, 0x71	; 113
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		TIMER0_u8DelayBusyWait(1000000);
    15d2:	60 e4       	ldi	r22, 0x40	; 64
    15d4:	72 e4       	ldi	r23, 0x42	; 66
    15d6:	8f e0       	ldi	r24, 0x0F	; 15
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    15de:	85 e6       	ldi	r24, 0x65	; 101
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
    15e6:	8e e6       	ldi	r24, 0x6E	; 110
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    15ee:	60 e4       	ldi	r22, 0x40	; 64
    15f0:	72 e4       	ldi	r23, 0x42	; 66
    15f2:	8f e0       	ldi	r24, 0x0F	; 15
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    15fa:	85 e6       	ldi	r24, 0x65	; 101
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
    1602:	8e e6       	ldi	r24, 0x6E	; 110
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    160a:	60 e4       	ldi	r22, 0x40	; 64
    160c:	72 e4       	ldi	r23, 0x42	; 66
    160e:	8f e0       	ldi	r24, 0x0F	; 15
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    1616:	85 e6       	ldi	r24, 0x65	; 101
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
    161e:	8e e6       	ldi	r24, 0x6E	; 110
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    1626:	60 e4       	ldi	r22, 0x40	; 64
    1628:	72 e4       	ldi	r23, 0x42	; 66
    162a:	8f e0       	ldi	r24, 0x0F	; 15
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    1632:	85 e6       	ldi	r24, 0x65	; 101
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		LED_voidToggle(&LED_YELLOW_PEDESTRIAN);
    163a:	8e e6       	ldi	r24, 0x6E	; 110
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    1642:	60 e4       	ldi	r22, 0x40	; 64
    1644:	72 e4       	ldi	r23, 0x42	; 66
    1646:	8f e0       	ldi	r24, 0x0F	; 15
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>

		LED_u8TurnOn(&LED_GREEN_CARS);
    164e:	82 e6       	ldi	r24, 0x62	; 98
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		LED_u8TurnOff(&LED_YELLOW_CARS);
    1656:	85 e6       	ldi	r24, 0x65	; 101
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_RED_CARS);
    165e:	88 e6       	ldi	r24, 0x68	; 104
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>

		LED_u8TurnOff(&LED_GREEN_PEDESTRIAN);
    1666:	8b e6       	ldi	r24, 0x6B	; 107
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
    166e:	8e e6       	ldi	r24, 0x6E	; 110
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOn(&LED_RED_PEDESTRIAN);
    1676:	81 e7       	ldi	r24, 0x71	; 113
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		CarLight_Last=CarLight;
    167e:	80 91 60 00 	lds	r24, 0x0060
    1682:	80 93 61 00 	sts	0x0061, r24
		CarLight=GREEN_CAR;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	80 93 60 00 	sts	0x0060, r24
	}
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <NormalMode>:

void NormalMode(void){
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <NormalMode+0x6>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <NormalMode+0x8>
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	switch(CarLight){
    16a4:	80 91 60 00 	lds	r24, 0x0060
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3c 83       	std	Y+4, r19	; 0x04
    16ae:	2b 83       	std	Y+3, r18	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	91 05       	cpc	r25, r1
    16b8:	a1 f1       	breq	.+104    	; 0x1722 <NormalMode+0x8a>
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	23 30       	cpi	r18, 0x03	; 3
    16c0:	31 05       	cpc	r19, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <NormalMode+0x2e>
    16c4:	95 c0       	rjmp	.+298    	; 0x17f0 <NormalMode+0x158>
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	91 05       	cpc	r25, r1
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <NormalMode+0x3a>
    16d0:	b6 c0       	rjmp	.+364    	; 0x183e <NormalMode+0x1a6>
	case GREEN_CAR:
		//GREEN ON
		CarLight=GREEN_CAR;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	80 93 60 00 	sts	0x0060, r24
		LED_u8TurnOn(&LED_GREEN_CARS);
    16d8:	82 e6       	ldi	r24, 0x62	; 98
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		LED_u8TurnOff(&LED_YELLOW_CARS);
    16e0:	85 e6       	ldi	r24, 0x65	; 101
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_RED_CARS);
    16e8:	88 e6       	ldi	r24, 0x68	; 104
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_GREEN_PEDESTRIAN);
    16f0:	8b e6       	ldi	r24, 0x6B	; 107
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
    16f8:	8e e6       	ldi	r24, 0x6E	; 110
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_RED_PEDESTRIAN);
    1700:	81 e7       	ldi	r24, 0x71	; 113
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		CarLight_Last=GREEN_CAR;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	80 93 61 00 	sts	0x0061, r24

		TIMER0_u8DelayBusyWait(5000000);
    170e:	60 e4       	ldi	r22, 0x40	; 64
    1710:	7b e4       	ldi	r23, 0x4B	; 75
    1712:	8c e4       	ldi	r24, 0x4C	; 76
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		CarLight=YELLOW_CAR;
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	80 93 60 00 	sts	0x0060, r24
    1720:	8e c0       	rjmp	.+284    	; 0x183e <NormalMode+0x1a6>

		break;
	case YELLOW_CAR:
		//YELLOW ON
		CarLight=YELLOW_CAR;
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	80 93 60 00 	sts	0x0060, r24
		LED_u8TurnOff(&LED_GREEN_CARS);
    1728:	82 e6       	ldi	r24, 0x62	; 98
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOn(&LED_YELLOW_CARS);
    1730:	85 e6       	ldi	r24, 0x65	; 101
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		LED_u8TurnOff(&LED_RED_CARS);
    1738:	88 e6       	ldi	r24, 0x68	; 104
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_GREEN_PEDESTRIAN);
    1740:	8b e6       	ldi	r24, 0x6B	; 107
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
    1748:	8e e6       	ldi	r24, 0x6E	; 110
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
		LED_u8TurnOn(&LED_RED_PEDESTRIAN);
    1750:	81 e7       	ldi	r24, 0x71	; 113
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
		TIMER0_u8DelayBusyWait(1000000);
    1758:	60 e4       	ldi	r22, 0x40	; 64
    175a:	72 e4       	ldi	r23, 0x42	; 66
    175c:	8f e0       	ldi	r24, 0x0F	; 15
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    1764:	85 e6       	ldi	r24, 0x65	; 101
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    176c:	60 e4       	ldi	r22, 0x40	; 64
    176e:	72 e4       	ldi	r23, 0x42	; 66
    1770:	8f e0       	ldi	r24, 0x0F	; 15
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    1778:	85 e6       	ldi	r24, 0x65	; 101
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    1780:	60 e4       	ldi	r22, 0x40	; 64
    1782:	72 e4       	ldi	r23, 0x42	; 66
    1784:	8f e0       	ldi	r24, 0x0F	; 15
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    178c:	85 e6       	ldi	r24, 0x65	; 101
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		TIMER0_u8DelayBusyWait(1000000);
    1794:	60 e4       	ldi	r22, 0x40	; 64
    1796:	72 e4       	ldi	r23, 0x42	; 66
    1798:	8f e0       	ldi	r24, 0x0F	; 15
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
		LED_voidToggle(&LED_YELLOW_CARS);
    17a0:	85 e6       	ldi	r24, 0x65	; 101
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 82 09 	call	0x1304	; 0x1304 <LED_voidToggle>
		switch(CarLight_Last){
    17a8:	80 91 61 00 	lds	r24, 0x0061
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	3a 83       	std	Y+2, r19	; 0x02
    17b2:	29 83       	std	Y+1, r18	; 0x01
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	59 f0       	breq	.+22     	; 0x17d4 <NormalMode+0x13c>
    17be:	29 81       	ldd	r18, Y+1	; 0x01
    17c0:	3a 81       	ldd	r19, Y+2	; 0x02
    17c2:	21 30       	cpi	r18, 0x01	; 1
    17c4:	31 05       	cpc	r19, r1
    17c6:	6c f0       	brlt	.+26     	; 0x17e2 <NormalMode+0x14a>
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	91 05       	cpc	r25, r1
    17d0:	44 f4       	brge	.+16     	; 0x17e2 <NormalMode+0x14a>
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <NormalMode+0x144>
		case GREEN_CAR :
			CarLight=RED_CAR;
    17d4:	83 e0       	ldi	r24, 0x03	; 3
    17d6:	80 93 60 00 	sts	0x0060, r24
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <NormalMode+0x14a>
			break;

		case YELLOW_CAR ... RED_CAR:
		CarLight=GREEN_CAR;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 93 60 00 	sts	0x0060, r24
		break;
		}

		TIMER0_u8DelayBusyWait(1000000);
    17e2:	60 e4       	ldi	r22, 0x40	; 64
    17e4:	72 e4       	ldi	r23, 0x42	; 66
    17e6:	8f e0       	ldi	r24, 0x0F	; 15
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
    17ee:	27 c0       	rjmp	.+78     	; 0x183e <NormalMode+0x1a6>

		break;
		case RED_CAR:
			//RED ON
			CarLight=RED_CAR;
    17f0:	83 e0       	ldi	r24, 0x03	; 3
    17f2:	80 93 60 00 	sts	0x0060, r24
			LED_u8TurnOff(&LED_GREEN_CARS);
    17f6:	82 e6       	ldi	r24, 0x62	; 98
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
			LED_u8TurnOff(&LED_YELLOW_CARS);
    17fe:	85 e6       	ldi	r24, 0x65	; 101
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
			LED_u8TurnOn(&LED_RED_CARS);
    1806:	88 e6       	ldi	r24, 0x68	; 104
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>

			LED_u8TurnOn(&LED_GREEN_PEDESTRIAN);
    180e:	8b e6       	ldi	r24, 0x6B	; 107
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 06 08 	call	0x100c	; 0x100c <LED_u8TurnOn>
			LED_u8TurnOff(&LED_YELLOW_PEDESTRIAN);
    1816:	8e e6       	ldi	r24, 0x6E	; 110
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
			LED_u8TurnOff(&LED_RED_PEDESTRIAN);
    181e:	81 e7       	ldi	r24, 0x71	; 113
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 c4 08 	call	0x1188	; 0x1188 <LED_u8TurnOff>
			CarLight_Last=RED_CAR;
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	80 93 61 00 	sts	0x0061, r24

			TIMER0_u8DelayBusyWait(5000000);
    182c:	60 e4       	ldi	r22, 0x40	; 64
    182e:	7b e4       	ldi	r23, 0x4B	; 75
    1830:	8c e4       	ldi	r24, 0x4C	; 76
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 48 01 	call	0x290	; 0x290 <TIMER0_u8DelayBusyWait>
			CarLight=YELLOW_CAR;
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	80 93 60 00 	sts	0x0060, r24

			break;
	}
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <main>:
 *  Created on: Sep 17, 2022
 *      Author: marwa
 */
#include "Application/APPLICATION.h"

void main(){
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	AppInit();
    1854:	0e 94 e5 09 	call	0x13ca	; 0x13ca <AppInit>
	while(1){
		AppStart();
    1858:	0e 94 04 0a 	call	0x1408	; 0x1408 <AppStart>
    185c:	fd cf       	rjmp	.-6      	; 0x1858 <main+0xc>

0000185e <__udivmodsi4>:
    185e:	a1 e2       	ldi	r26, 0x21	; 33
    1860:	1a 2e       	mov	r1, r26
    1862:	aa 1b       	sub	r26, r26
    1864:	bb 1b       	sub	r27, r27
    1866:	fd 01       	movw	r30, r26
    1868:	0d c0       	rjmp	.+26     	; 0x1884 <__udivmodsi4_ep>

0000186a <__udivmodsi4_loop>:
    186a:	aa 1f       	adc	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	ee 1f       	adc	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	a2 17       	cp	r26, r18
    1874:	b3 07       	cpc	r27, r19
    1876:	e4 07       	cpc	r30, r20
    1878:	f5 07       	cpc	r31, r21
    187a:	20 f0       	brcs	.+8      	; 0x1884 <__udivmodsi4_ep>
    187c:	a2 1b       	sub	r26, r18
    187e:	b3 0b       	sbc	r27, r19
    1880:	e4 0b       	sbc	r30, r20
    1882:	f5 0b       	sbc	r31, r21

00001884 <__udivmodsi4_ep>:
    1884:	66 1f       	adc	r22, r22
    1886:	77 1f       	adc	r23, r23
    1888:	88 1f       	adc	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	1a 94       	dec	r1
    188e:	69 f7       	brne	.-38     	; 0x186a <__udivmodsi4_loop>
    1890:	60 95       	com	r22
    1892:	70 95       	com	r23
    1894:	80 95       	com	r24
    1896:	90 95       	com	r25
    1898:	9b 01       	movw	r18, r22
    189a:	ac 01       	movw	r20, r24
    189c:	bd 01       	movw	r22, r26
    189e:	cf 01       	movw	r24, r30
    18a0:	08 95       	ret

000018a2 <_exit>:
    18a2:	f8 94       	cli

000018a4 <__stop_program>:
    18a4:	ff cf       	rjmp	.-2      	; 0x18a4 <__stop_program>
